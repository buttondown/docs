{
  "openapi": "3.0.2",
  "info": {
    "title": "Buttondown API",
    "version": "1.0.0",
    "description": "The Buttondown API"
  },
  "paths": {
    "/exports": {
      "post": {
        "operationId": "create_export",
        "summary": "Create Export",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Export"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage_CreateExportErrorCode_"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "get": {
        "operationId": "list_exports",
        "summary": "List Exports",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/exports/{id}": {
      "get": {
        "operationId": "retrieve_export",
        "summary": "Retrieve Export",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Export"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Retrieve a specific export by its ID",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/tags": {
      "post": {
        "operationId": "create_tag",
        "summary": "Create Tag",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "get": {
        "operationId": "list_tags",
        "summary": "List Tags",
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "schema": {
              "title": "Ids",
              "description": "If provided, only return tags matching the given IDs.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "description": "If provided, only return tags matching the given IDs."
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "title": "Page Size",
              "default": 100,
              "minimum": 1,
              "maximum": 1000,
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/tags/{id}": {
      "get": {
        "operationId": "retrieve_tag",
        "summary": "Retrieve Tag",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Retrieve a specific tag by its ID",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "patch": {
        "operationId": "update_tag",
        "summary": "Update Tag",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage_UpdateTagErrorCode_"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        },
        "description": "Update a tag's properties",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagUpdateInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "delete": {
        "operationId": "delete_tag",
        "summary": "Delete Tag",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Delete a tag",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/tags/{id}/analytics": {
      "get": {
        "operationId": "retrieve_tag_analytics",
        "summary": "Retrieve Tag Analytics",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagAnalytics"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        },
        "description": "Retrieve analytics for a specific tag",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/ping": {
      "get": {
        "operationId": "ping",
        "summary": "Ping",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "GlobalAuth": []
          },
          {
            "OAuthAuth": []
          },
          {
            "FallbackForNoAuth": []
          }
        ]
      }
    },
    "/accounts/me": {
      "get": {
        "operationId": "get_account",
        "summary": "Get Account",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "GlobalAuth": []
          },
          {
            "OAuthAuth": []
          },
          {
            "FallbackForNoAuth": []
          }
        ]
      }
    },
    "/images": {
      "post": {
        "operationId": "create_image",
        "summary": "Create Image",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Image"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "title": "FileParams",
                "type": "object",
                "properties": {
                  "image": {
                    "title": "Image",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "image"
                ]
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "get": {
        "operationId": "list_images",
        "summary": "List Images",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImagePage"
                }
              }
            }
          }
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/images/{id}": {
      "delete": {
        "operationId": "delete_image",
        "summary": "Delete Image",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Delete an uploaded image",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/attachments": {
      "post": {
        "operationId": "create_attachment",
        "summary": "Create Attachment",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "title": "Name",
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "title": "FileParams",
                "type": "object",
                "properties": {
                  "file": {
                    "title": "File",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "get": {
        "operationId": "list_attachments",
        "summary": "List Attachments",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentPage"
                }
              }
            }
          }
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/attachments/{id}": {
      "delete": {
        "operationId": "delete_attachment",
        "summary": "Delete Attachment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string"
                }
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Delete an attachment",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/emails": {
      "post": {
        "operationId": "create_email",
        "summary": "Create Email",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Email"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage_EmailCreationErrorCode_"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "get": {
        "operationId": "list_emails",
        "summary": "List Emails",
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "description": "If provided, only return emails with the given status.",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EmailStatus"
              }
            },
            "required": false,
            "description": "If provided, only return emails with the given status."
          },
          {
            "in": "query",
            "name": "negative_status",
            "schema": {
              "description": "If provided, only return emails without the given status.",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EmailStatus"
              }
            },
            "required": false,
            "description": "If provided, only return emails without the given status."
          },
          {
            "in": "query",
            "name": "automations",
            "schema": {
              "title": "Automations",
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false
          },
          {
            "in": "query",
            "name": "ids",
            "schema": {
              "title": "Ids",
              "description": "If provided, only return emails with the given ids.",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "required": false,
            "description": "If provided, only return emails with the given ids."
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "default": "creation_date",
              "allOf": [
                {
                  "title": "Ordering",
                  "description": "An enumeration.",
                  "enum": [
                    "creation_date",
                    "-creation_date",
                    "status",
                    "-status",
                    "publish_date",
                    "-publish_date",
                    "subject",
                    "-subject",
                    "email_type",
                    "-email_type",
                    "modification_date",
                    "-modification_date",
                    "clicks",
                    "-clicks",
                    "opens",
                    "-opens",
                    "click_rate",
                    "-click_rate",
                    "open_rate",
                    "-open_rate",
                    "page_views_lifetime",
                    "-page_views_lifetime",
                    "page_views_30",
                    "-page_views_30",
                    "page_views_7",
                    "-page_views_7",
                    "webmentions",
                    "-webmentions",
                    "subscriptions",
                    "-subscriptions",
                    "paid_subscriptions",
                    "-paid_subscriptions",
                    "unsubscriptions",
                    "-unsubscriptions",
                    "replies",
                    "-replies",
                    "comments",
                    "-comments",
                    "social_mentions",
                    "-social_mentions",
                    "permanent_failure_rate",
                    "-permanent_failure_rate",
                    "complaint_rate",
                    "-complaint_rate"
                  ],
                  "type": "string"
                }
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "creation_date__start",
            "schema": {
              "title": "Creation Date  Start",
              "description": "If provided, only return emails created after the given date.",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "type": "string"
            },
            "required": false,
            "description": "If provided, only return emails created after the given date."
          },
          {
            "in": "query",
            "name": "creation_date__end",
            "schema": {
              "title": "Creation Date  End",
              "description": "If provided, only return emails created before the given date.",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "type": "string"
            },
            "required": false,
            "description": "If provided, only return emails created before the given date."
          },
          {
            "in": "query",
            "name": "publish_date__start",
            "schema": {
              "title": "Publish Date  Start",
              "description": "If provided, only return emails published after the given date.",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "type": "string"
            },
            "required": false,
            "description": "If provided, only return emails published after the given date."
          },
          {
            "in": "query",
            "name": "publish_date__end",
            "schema": {
              "title": "Publish Date  End",
              "description": "If provided, only return emails published before the given date.",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "type": "string"
            },
            "required": false,
            "description": "If provided, only return emails published before the given date."
          },
          {
            "in": "query",
            "name": "excluded_fields",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EmailExcludableField"
              }
            },
            "required": false
          },
          {
            "in": "query",
            "name": "source",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EmailSource"
              }
            },
            "required": false
          },
          {
            "in": "query",
            "name": "email_type",
            "schema": {
              "description": "The type of emails to return. Defaults to all types.",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EmailType"
              }
            },
            "required": false,
            "description": "The type of emails to return. Defaults to all types."
          },
          {
            "in": "query",
            "name": "subject",
            "schema": {
              "title": "Subject",
              "description": "If provided, only return emails with a subject that contains the given string.",
              "type": "string"
            },
            "required": false,
            "description": "If provided, only return emails with a subject that contains the given string."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage_EmailListErrorCode_"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/emails/{id}": {
      "patch": {
        "operationId": "update_email",
        "summary": "Update Email",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Email"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Update an email's properties",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailUpdateInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "get": {
        "operationId": "retrieve_email",
        "summary": "Retrieve Email",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Email"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Retrieve a specific email by its ID",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/emails/{id}/history": {
      "get": {
        "operationId": "retrieve_email_history",
        "summary": "Retrieve Email History",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "expand",
            "schema": {
              "title": "Expand",
              "description": "If provided, expand the given field.",
              "type": "array",
              "items": {
                "enum": [
                  "user"
                ],
                "type": "string"
              }
            },
            "required": false,
            "description": "If provided, expand the given field."
          },
          {
            "in": "query",
            "name": "field",
            "schema": {
              "title": "Field",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "title": "Page",
              "description": "The page number of the paginated response.",
              "example": 1,
              "type": "integer"
            },
            "required": false,
            "description": "The page number of the paginated response."
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "title": "Ordering",
              "default": "creation_date",
              "enum": [
                "creation_date",
                "-creation_date"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "title": "Query",
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "title": "Page Size",
              "default": 100,
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Retrieve the edit history for a specific email",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/emails/{id}/history/body/{history_id}": {
      "get": {
        "operationId": "retrieve_email_history_by_id",
        "summary": "Retrieve Email History By Id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "history_id",
            "schema": {
              "title": "History Id",
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "expand",
            "schema": {
              "title": "Expand",
              "description": "If provided, expand the given field.",
              "type": "array",
              "items": {
                "enum": [
                  "user"
                ],
                "type": "string"
              }
            },
            "required": false,
            "description": "If provided, expand the given field."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/History"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Retrieve a specific historical version of an email's body",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/emails/{id}/analytics": {
      "get": {
        "operationId": "retrieve_email_analytics",
        "summary": "Retrieve Email Analytics",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Analytics"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Retrieve analytics for a specific email",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/emails/{id}/send-draft": {
      "post": {
        "operationId": "send_draft",
        "summary": "Send Draft",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Send a draft email to specific recipients",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendDraftInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/subscribers": {
      "post": {
        "operationId": "create_subscriber",
        "summary": "Create Subscriber",
        "parameters": [
          {
            "in": "header",
            "name": "X-Buttondown-Collision-Behavior",
            "schema": {
              "description": "The behavior to apply when a subscriber with the same email address already exists.\nDefaults to \"no_op\", which will return a 400 error if a subscriber with the same email address already exists. Other values include:\n\n- \"overwrite\", which will overwrite the existing subscriber's data with the new one.\n- \"add\", which will add the new subscriber data to the existing one.\n        ",
              "default": "no_op",
              "allOf": [
                {
                  "title": "CollisionBehavior",
                  "description": "An enumeration.",
                  "enum": [
                    "no_op",
                    "add",
                    "overwrite",
                    "fail"
                  ]
                }
              ]
            },
            "required": false,
            "description": "The behavior to apply when a subscriber with the same email address already exists.\nDefaults to \"no_op\", which will return a 400 error if a subscriber with the same email address already exists. Other values include:\n\n- \"overwrite\", which will overwrite the existing subscriber's data with the new one.\n- \"add\", which will add the new subscriber data to the existing one.\n        "
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriber"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage_ValidationErrorCode_"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriberInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "get": {
        "operationId": "list_subscribers",
        "summary": "List Subscribers",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": {
              "description": "If provided, only return subscribers with the given type.",
              "example": "regular",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SubscriberType"
              }
            },
            "required": false,
            "description": "If provided, only return subscribers with the given type."
          },
          {
            "in": "query",
            "name": "-type",
            "schema": {
              "description": "If provided, only return subscribers without the given type.",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SubscriberType"
              }
            },
            "required": false,
            "description": "If provided, only return subscribers without the given type."
          },
          {
            "in": "query",
            "name": "ids",
            "schema": {
              "title": "Ids",
              "description": "If provided, only return subscribers with the given IDs.",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "required": false,
            "description": "If provided, only return subscribers with the given IDs."
          },
          {
            "in": "query",
            "name": "email_address",
            "schema": {
              "title": "Email Address",
              "description": "If provided, only return subscribers whose email address contains the given string.",
              "example": "telemachus@buttondown.email",
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^[a-zA-Z0-9._%+\\-!]+@[a-zA-Z0-9.\\-]+\\.[a-zA-Z]{2,}$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9._%+\\-!]+@[a-zA-Z0-9.\\-]+\\.[a-zA-Z]{2,}$"
                  }
                }
              ]
            },
            "required": false,
            "description": "If provided, only return subscribers whose email address contains the given string."
          },
          {
            "in": "query",
            "name": "tag",
            "schema": {
              "title": "Tag",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false
          },
          {
            "in": "query",
            "name": "-tag",
            "schema": {
              "title": "-Tag",
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "title": "Ordering",
              "default": "-creation_date",
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "price",
            "schema": {
              "title": "Price",
              "description": "If provided, only return subscribers who have at one point subscribed to the given price ID(s).",
              "example": "price_whatever",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "description": "If provided, only return subscribers who have at one point subscribed to the given price ID(s)."
          },
          {
            "in": "query",
            "name": "current_price",
            "schema": {
              "title": "Current Price",
              "description": "If provided, only return subscribers who are currently subscribed to the given price ID(s).",
              "example": "price_whatever",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "description": "If provided, only return subscribers who are currently subscribed to the given price ID(s)."
          },
          {
            "in": "query",
            "name": "coupon",
            "schema": {
              "title": "Coupon",
              "description": "If provided, only return subscribers with the given coupon ID(s).",
              "example": "coupon_whatever",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "description": "If provided, only return subscribers with the given coupon ID(s)."
          },
          {
            "in": "query",
            "name": "referral_code",
            "schema": {
              "title": "Referral Code",
              "description": "If provided, only return subscribers with the given referral code(s).",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "description": "If provided, only return subscribers with the given referral code(s)."
          },
          {
            "in": "query",
            "name": "date__start",
            "schema": {
              "title": "Date  Start",
              "description": "If provided, only return subscribers created on or after the given date.",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "type": "string"
            },
            "required": false,
            "description": "If provided, only return subscribers created on or after the given date."
          },
          {
            "in": "query",
            "name": "date__end",
            "schema": {
              "title": "Date  End",
              "description": "If provided, only return subscribers created before the given date.",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "type": "string"
            },
            "required": false,
            "description": "If provided, only return subscribers created before the given date."
          },
          {
            "in": "query",
            "name": "last_open_date__start",
            "schema": {
              "title": "Last Open Date  Start",
              "description": "If provided, only return subscribers with the given last open date(s).",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "type": "string"
            },
            "required": false,
            "description": "If provided, only return subscribers with the given last open date(s)."
          },
          {
            "in": "query",
            "name": "last_open_date__end",
            "schema": {
              "title": "Last Open Date  End",
              "description": "If provided, only return subscribers with the given last open date(s).",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "type": "string"
            },
            "required": false,
            "description": "If provided, only return subscribers with the given last open date(s)."
          },
          {
            "in": "query",
            "name": "last_click_date__start",
            "schema": {
              "title": "Last Click Date  Start",
              "description": "If provided, only return subscribers with the given last click date(s).",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "type": "string"
            },
            "required": false,
            "description": "If provided, only return subscribers with the given last click date(s)."
          },
          {
            "in": "query",
            "name": "last_click_date__end",
            "schema": {
              "title": "Last Click Date  End",
              "description": "If provided, only return subscribers with the given last click date(s).",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "type": "string"
            },
            "required": false,
            "description": "If provided, only return subscribers with the given last click date(s)."
          },
          {
            "in": "query",
            "name": "subscriber_import",
            "schema": {
              "title": "Subscriber Import",
              "description": "If provided, only return subscribers that were imported by the given subscriber import.",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "required": false,
            "description": "If provided, only return subscribers that were imported by the given subscriber import."
          },
          {
            "in": "query",
            "name": "expand",
            "schema": {
              "title": "Expand",
              "description": "If provided, expand the given field. (Only supported fields: 'stripe_customer')",
              "type": "array",
              "items": {
                "enum": [
                  "stripe_customer"
                ],
                "type": "string"
              }
            },
            "required": false,
            "description": "If provided, expand the given field. (Only supported fields: 'stripe_customer')"
          },
          {
            "in": "query",
            "name": "ip_address",
            "schema": {
              "title": "Ip Address",
              "description": "If provided, only return subscribers with the given IP address(es).",
              "pattern": "^[^\\s]+$",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[^\\s]+$"
              }
            },
            "required": false,
            "description": "If provided, only return subscribers with the given IP address(es)."
          },
          {
            "in": "query",
            "name": "upgrade_date__start",
            "schema": {
              "title": "Upgrade Date  Start",
              "description": "If provided, only return subscribers with the given upgrade date(s).",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "type": "string"
            },
            "required": false,
            "description": "If provided, only return subscribers with the given upgrade date(s)."
          },
          {
            "in": "query",
            "name": "upgrade_date__end",
            "schema": {
              "title": "Upgrade Date  End",
              "description": "If provided, only return subscribers with the given upgrade date(s).",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "type": "string"
            },
            "required": false,
            "description": "If provided, only return subscribers with the given upgrade date(s)."
          },
          {
            "in": "query",
            "name": "churn_date__start",
            "schema": {
              "title": "Churn Date  Start",
              "description": "If provided, only return subscribers with the given churn date(s).",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "type": "string"
            },
            "required": false,
            "description": "If provided, only return subscribers with the given churn date(s)."
          },
          {
            "in": "query",
            "name": "churn_date__end",
            "schema": {
              "title": "Churn Date  End",
              "description": "If provided, only return subscribers with the given churn date(s).",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "type": "string"
            },
            "required": false,
            "description": "If provided, only return subscribers with the given churn date(s)."
          },
          {
            "in": "query",
            "name": "undeliverability_date__start",
            "schema": {
              "title": "Undeliverability Date  Start",
              "description": "If provided, only return subscribers with the given undeliverability date(s).",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "type": "string"
            },
            "required": false,
            "description": "If provided, only return subscribers with the given undeliverability date(s)."
          },
          {
            "in": "query",
            "name": "undeliverability_date__end",
            "schema": {
              "title": "Undeliverability Date  End",
              "description": "If provided, only return subscribers with the given undeliverability date(s).",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "type": "string"
            },
            "required": false,
            "description": "If provided, only return subscribers with the given undeliverability date(s)."
          },
          {
            "in": "query",
            "name": "undeliverability_reason",
            "schema": {
              "description": "If provided, only return subscribers with the given undeliverability reason(s).",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SubscriberUndeliverabilityReason"
              }
            },
            "required": false,
            "description": "If provided, only return subscribers with the given undeliverability reason(s)."
          },
          {
            "in": "query",
            "name": "unsubscription_reason",
            "schema": {
              "title": "Unsubscription Reason",
              "description": "If provided, only return subscribers with the given unsubscription reason(s).",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "description": "If provided, only return subscribers with the given unsubscription reason(s)."
          },
          {
            "in": "query",
            "name": "unsubscription_date__start",
            "schema": {
              "title": "Unsubscription Date  Start",
              "description": "If provided, only return subscribers with the given unsubscription date(s).",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "type": "string"
            },
            "required": false,
            "description": "If provided, only return subscribers with the given unsubscription date(s)."
          },
          {
            "in": "query",
            "name": "unsubscription_date__end",
            "schema": {
              "title": "Unsubscription Date  End",
              "description": "If provided, only return subscribers with the given unsubscription date(s).",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "type": "string"
            },
            "required": false,
            "description": "If provided, only return subscribers with the given unsubscription date(s)."
          },
          {
            "in": "query",
            "name": "referrer_url",
            "schema": {
              "title": "Referrer Url",
              "description": "If provided, only return subscribers whose referrer URL(s) contain the given string.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "description": "If provided, only return subscribers whose referrer URL(s) contain the given string."
          },
          {
            "in": "query",
            "name": "utm_source",
            "schema": {
              "title": "Utm Source",
              "description": "If provided, only return subscribers with the given UTM source(s).",
              "example": "paid_campaign_2024",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "description": "If provided, only return subscribers with the given UTM source(s)."
          },
          {
            "in": "query",
            "name": "utm_campaign",
            "schema": {
              "title": "Utm Campaign",
              "description": "If provided, only return subscribers with the given UTM campaign(s).",
              "example": "paid_campaign_2024",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "description": "If provided, only return subscribers with the given UTM campaign(s)."
          },
          {
            "in": "query",
            "name": "utm_medium",
            "schema": {
              "title": "Utm Medium",
              "description": "If provided, only return subscribers with the given UTM medium(s).",
              "example": "paid_campaign_2024",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "description": "If provided, only return subscribers with the given UTM medium(s)."
          },
          {
            "in": "query",
            "name": "domain",
            "schema": {
              "title": "Domain",
              "description": "If provided, only return subscribers whose email domain matches the given domain(s).",
              "example": "gmail.com",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "description": "If provided, only return subscribers whose email domain matches the given domain(s)."
          },
          {
            "in": "query",
            "name": "-domain",
            "schema": {
              "title": "-Domain",
              "description": "If provided, only return subscribers whose email domain does not match the given domain(s).",
              "example": "gmail.com",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "description": "If provided, only return subscribers whose email domain does not match the given domain(s)."
          },
          {
            "in": "query",
            "name": "risk_score__start",
            "schema": {
              "title": "Risk Score  Start",
              "description": "If provided, only return subscribers with a risk score greater than or equal to the given value.",
              "type": "number"
            },
            "required": false,
            "description": "If provided, only return subscribers with a risk score greater than or equal to the given value."
          },
          {
            "in": "query",
            "name": "risk_score__end",
            "schema": {
              "title": "Risk Score  End",
              "description": "If provided, only return subscribers with a risk score less than or equal to the given value.",
              "type": "number"
            },
            "required": false,
            "description": "If provided, only return subscribers with a risk score less than or equal to the given value."
          },
          {
            "in": "query",
            "name": "source",
            "schema": {
              "description": "If provided, only return subscribers with the given source(s).",
              "example": "api",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SubscriberSource"
              }
            },
            "required": false,
            "description": "If provided, only return subscribers with the given source(s)."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage_ListSubscribersErrorCode_"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/subscribers/{id_or_email}": {
      "get": {
        "operationId": "retrieve_subscriber",
        "summary": "Retrieve Subscriber",
        "parameters": [
          {
            "in": "path",
            "name": "id_or_email",
            "schema": {
              "title": "Id Or Email",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "expand",
            "schema": {
              "title": "Expand",
              "default": [],
              "type": "array",
              "items": {
                "enum": [
                  "stripe_customer"
                ],
                "type": "string"
              }
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriber"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "delete": {
        "operationId": "delete_subscriber",
        "summary": "Delete Subscriber",
        "parameters": [
          {
            "in": "path",
            "name": "id_or_email",
            "schema": {
              "title": "Id Or Email",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "patch": {
        "operationId": "update_subscriber",
        "summary": "Update Subscriber",
        "parameters": [
          {
            "in": "path",
            "name": "id_or_email",
            "schema": {
              "title": "Id Or Email",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriber"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage_UpdateSubscriberErrorCode_"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriberUpdateInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/subscribers/{id_or_email}/send-reminder": {
      "post": {
        "operationId": "send_reminder",
        "summary": "Send Reminder",
        "parameters": [
          {
            "in": "path",
            "name": "id_or_email",
            "schema": {
              "title": "Id Or Email",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/subscribers/{id_or_email}/emails/{email_id}": {
      "post": {
        "operationId": "send_email_to",
        "summary": "Send Email To",
        "parameters": [
          {
            "in": "path",
            "name": "id_or_email",
            "schema": {
              "title": "Id Or Email",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "email_id",
            "schema": {
              "title": "Email Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/subscribers/{id_or_email}/referrals": {
      "get": {
        "operationId": "get_referrals",
        "summary": "Get Referrals",
        "parameters": [
          {
            "in": "path",
            "name": "id_or_email",
            "schema": {
              "title": "Id Or Email",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/subscribers/{id_or_email}/automations": {
      "get": {
        "operationId": "get_automations",
        "summary": "Get Automations",
        "parameters": [
          {
            "in": "path",
            "name": "id_or_email",
            "schema": {
              "title": "Id Or Email",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationForSubscriberPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/subscribers/{id_or_email}/stripe-subscriptions": {
      "get": {
        "operationId": "get_stripe_subscriptions",
        "summary": "Get Stripe Subscriptions",
        "parameters": [
          {
            "in": "path",
            "name": "id_or_email",
            "schema": {
              "title": "Id Or Email",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StripeSubscriptionPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/newsletters": {
      "get": {
        "operationId": "list_newsletters",
        "summary": "List Newsletters",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewsletterPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "post": {
        "operationId": "create_newsletter",
        "summary": "Create Newsletter",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Newsletter"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage_CreateNewsletterErrorCode_"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewsletterInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/newsletters/{id}": {
      "patch": {
        "operationId": "update_newsletter",
        "summary": "Update Newsletter",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Newsletter"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Update a newsletter's settings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewsletterUpdateInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "delete": {
        "operationId": "delete_newsletter",
        "summary": "Delete Newsletter",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Delete a newsletter",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/bulk_actions": {
      "post": {
        "operationId": "create_bulk_action",
        "summary": "Create Bulk Action",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkAction"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkActionInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "BulkActionAuth": []
          }
        ]
      }
    },
    "/bulk_actions/{id}": {
      "get": {
        "operationId": "retrieve_bulk_action",
        "summary": "Retrieve Bulk Action",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkAction"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Retrieve the status of a bulk action",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/external_feeds": {
      "post": {
        "operationId": "create_external_feed",
        "summary": "Create External Feed",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalFeed"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalFeedInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "get": {
        "operationId": "list_external_feed",
        "summary": "List External Feed",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalFeedPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/external_feeds/{id}": {
      "patch": {
        "operationId": "update_external_feed",
        "summary": "Update External Feed",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalFeed"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Update an external feed's properties",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalFeedUpdateInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "delete": {
        "operationId": "delete_external_feed",
        "summary": "Delete External Feed",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Delete an external feed",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "get": {
        "operationId": "retrieve_external_feed",
        "summary": "Retrieve External Feed",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalFeed"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Retrieve a specific external feed by its ID",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/external_feeds/{id}/items": {
      "post": {
        "operationId": "poll_items",
        "summary": "Poll Items",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Poll for new items in an external feed",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "get": {
        "operationId": "retrieve_items",
        "summary": "Retrieve Items",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "expand",
            "schema": {
              "title": "Expand",
              "description": "If provided, expand the given field.",
              "type": "array",
              "items": {
                "enum": [
                  "email"
                ],
                "type": "string"
              }
            },
            "required": false,
            "description": "If provided, expand the given field."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalFeedItemPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Retrieve items from an external feed",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/automations": {
      "get": {
        "operationId": "list_automations",
        "summary": "List Automations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "post": {
        "operationId": "create_automation",
        "summary": "Create Automation",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Automation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage_AutomationCreationErrorCode_"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/automations/{id}/subscribers": {
      "get": {
        "operationId": "retrieve_automation_subscribers",
        "summary": "Retrieve Automation Subscribers",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "expand",
            "schema": {
              "title": "Expand",
              "description": "If provided, expand the given field. (Only supported field: 'subscriber').",
              "type": "array",
              "items": {
                "enum": [
                  "subscriber"
                ],
                "type": "string"
              }
            },
            "required": false,
            "description": "If provided, expand the given field. (Only supported field: 'subscriber')."
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "title": "Page",
              "default": 1,
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberForAutomationPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Retrieve subscribers associated with an automation",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/automations/{id}": {
      "get": {
        "operationId": "retrieve_automation",
        "summary": "Retrieve Automation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Automation"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Retrieve a specific automation by its ID",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "patch": {
        "operationId": "update_automation",
        "summary": "Update Automation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Automation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Update an automation's properties",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationUpdateInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "delete": {
        "operationId": "delete_automation",
        "summary": "Delete Automation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Delete an automation",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/automations/{id}/invoke": {
      "post": {
        "operationId": "invoke_automation",
        "summary": "Invoke Automation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Manually trigger an automation",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/automations/{id}/analytics": {
      "get": {
        "operationId": "retrieve_automation_analytics",
        "summary": "Retrieve Automation Analytics",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Analytics"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Retrieve analytics data for an automation",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/users": {
      "post": {
        "operationId": "create_user",
        "summary": "Create User",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage_Failure_"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "get": {
        "operationId": "list_users",
        "summary": "List Users",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "operationId": "retrieve_user",
        "summary": "Retrieve User",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Retrieve a specific user by its ID",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "delete": {
        "operationId": "delete_user",
        "summary": "Delete User",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Delete a user",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "patch": {
        "operationId": "update_user",
        "summary": "Update User",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Update a user's properties",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/prices": {
      "get": {
        "operationId": "list_prices",
        "summary": "List Prices",
        "parameters": [
          {
            "in": "query",
            "name": "expand",
            "schema": {
              "title": "Expand",
              "description": "If provided, expand the given field.",
              "type": "array",
              "items": {
                "enum": [
                  "product"
                ],
                "type": "string"
              }
            },
            "required": false,
            "description": "If provided, expand the given field."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricePage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage_ListPricesErrorCode_"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "post": {
        "operationId": "create_price",
        "summary": "Create Price",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Price"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage_CreatePriceErrorCode_"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PriceInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/coupons": {
      "get": {
        "operationId": "list_coupons",
        "summary": "List Coupons",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StripeCouponPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/surveys": {
      "post": {
        "operationId": "create_survey",
        "summary": "Create Survey",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Survey"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage_CreateSurveyErrorCode_"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SurveyInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "get": {
        "operationId": "list_surveys",
        "summary": "List Surveys",
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "description": "If provided, only return surveys with the given status.",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SurveyStatus"
              }
            },
            "required": false,
            "description": "If provided, only return surveys with the given status."
          },
          {
            "in": "query",
            "name": "-status",
            "schema": {
              "description": "If provided, only return surveys without the given status.",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SurveyStatus"
              }
            },
            "required": false,
            "description": "If provided, only return surveys without the given status."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SurveyPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/surveys/{id}": {
      "get": {
        "operationId": "retrieve_survey",
        "summary": "Retrieve Survey",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Survey"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Retrieve a specific survey by its ID",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "patch": {
        "operationId": "update_survey",
        "summary": "Update Survey",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Survey"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage_UpdateSurveyErrorCode_"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Update a survey's properties",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SurveyUpdateInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "delete": {
        "operationId": "delete_survey",
        "summary": "Delete Survey",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Delete a survey",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/api_requests/{id}": {
      "get": {
        "operationId": "retrieve_api_request",
        "summary": "Retrieve Api Request",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIRequestDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Retrieve a specific API request by its ID",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/api_requests": {
      "get": {
        "operationId": "list_api_requests",
        "summary": "List Api Requests",
        "parameters": [
          {
            "in": "query",
            "name": "status_code",
            "schema": {
              "title": "Status Code",
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false
          },
          {
            "in": "query",
            "name": "method",
            "schema": {
              "title": "Method",
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false
          },
          {
            "in": "query",
            "name": "source",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/APIRequestSource"
              }
            },
            "required": false
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "title": "Version",
              "type": "array",
              "items": {
                "enum": [
                  "2024-07-01",
                  "2024-08-01",
                  "2024-08-15",
                  "2024-09-30",
                  "2024-12-30",
                  "2025-01-02",
                  "2025-05-19",
                  "2025-06-01",
                  "2026-01-01"
                ],
                "type": "string"
              }
            },
            "required": false
          },
          {
            "in": "query",
            "name": "date__start",
            "schema": {
              "title": "Date  Start",
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "date__end",
            "schema": {
              "title": "Date  End",
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "creation_date__lt",
            "schema": {
              "title": "Creation Date  Lt",
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "creation_date__gt",
            "schema": {
              "title": "Creation Date  Gt",
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "path",
            "schema": {
              "title": "Path",
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIRequestList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/advertising_units": {
      "get": {
        "operationId": "list_advertising_units",
        "summary": "List Advertising Units",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdvertisingUnitPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "post": {
        "operationId": "create_advertising_unit",
        "summary": "Create Advertising Unit",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdvertisingUnit"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdvertisingUnitInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/advertising_units/{id}": {
      "patch": {
        "operationId": "update_advertising_unit",
        "summary": "Update Advertising Unit",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdvertisingUnit"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Update an advertising unit's properties",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdvertisingUnitUpdateInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "delete": {
        "operationId": "delete_advertising_unit",
        "summary": "Delete Advertising Unit",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Delete an advertising unit",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/advertising_units/slots/{id}": {
      "patch": {
        "operationId": "update_advertising_slot",
        "summary": "Update Advertising Slot",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdvertisingSlot"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Update an advertising slot's sponsor content",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdvertisingSlotUpdateInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/webhooks": {
      "post": {
        "operationId": "create_webhook",
        "summary": "Create Webhook",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "get": {
        "operationId": "list_webhooks",
        "summary": "List Webhooks",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/webhooks/{id}": {
      "get": {
        "operationId": "retrieve_webhook",
        "summary": "Retrieve Webhook",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Retrieve a specific webhook by its ID",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "patch": {
        "operationId": "update_webhook",
        "summary": "Update Webhook",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Update a webhook's properties",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "delete": {
        "operationId": "delete_webhook",
        "summary": "Delete Webhook",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Delete a webhook",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/webhooks/{id}/attempts": {
      "get": {
        "operationId": "retrieve_webhook_attempts",
        "summary": "Retrieve Webhook Attempts",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookAttemptOutputPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Retrieve webhook attempts for a specific webhook",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/webhooks/{id}/test": {
      "post": {
        "operationId": "test_webhook",
        "summary": "Test Webhook",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "event_type",
            "schema": {
              "title": "Type",
              "description": "Various types of events that are recorded by Buttondown, both in terms of exogenous systems\nlike Stripe and Memberful, and endogenous ones like email opens and clicks. (In general, if anything\nimportant ever happens that could be relevant to your newsletter, we have an event type for it!)\n\nThese event types power lots of things within Buttondown. They're used to trigger automations, webhooks,\nand analytics.\n\n(Note that Buttondown also has a different thing we call \"events\"; those are `EmailEvents` and are used\nfor tracking aggregate details about an email. Alas, we shouldn't have used the term \"event\" for two different\nthings, but it's too late to go back now!)\n\nIn general, our event namespacing tries to hew to the following pattern:\n\n<source>.<object>.<action>\n\nWhen wondering which object we are referring to, default to the _more granular_ object.\n\nFor instance, an email being sent to a subscriber is `subscriber.delivered`, not `email.sent`.",
              "enum": [
                "subscriber.created",
                "subscriber.unsubscribed",
                "subscriber.changed_email",
                "subscriber.confirmed",
                "subscriber.trial_started",
                "subscriber.trial_ended",
                "subscriber.type.changed",
                "subscriber.tags.changed",
                "subscriber.clicked",
                "subscriber.opened",
                "subscriber.paid",
                "subscriber.churned",
                "subscriber.updated",
                "subscriber.deleted",
                "subscriber.viewed_checkout_page",
                "subscriber.replied",
                "subscriber.paused",
                "subscriber.resumed",
                "subscriber.responded_to_survey",
                "subscriber.referred",
                "subscriber.referred.paid",
                "subscriber.commented",
                "subscriber.delivered",
                "subscriber.complained",
                "subscriber.bounced",
                "subscriber.rejected",
                "survey.created",
                "survey.updated",
                "survey.deleted",
                "survey.cleared_responses",
                "email.created",
                "email.sent",
                "email.updated",
                "email.deleted",
                "email.status.changed",
                "mention.created",
                "advertising_slot.purchased",
                "social_mention.created",
                "export.created",
                "export.completed",
                "export.failed",
                "automation.invoked",
                "stripe.checkout.session.completed",
                "stripe.subscription.activated",
                "stripe.subscription.churning",
                "stripe.subscription.deactivated",
                "stripe.customer.updated",
                "memberful.subscription.created",
                "memberful.subscription.deleted",
                "memberful.member.updated",
                "date.day.started",
                "date.week.started",
                "date.month.started",
                "date.year.started",
                "firewall.blocked",
                "patreon.membership.created",
                "patreon.membership.deleted",
                "patreon.member.updated",
                "note.created",
                "note.deleted",
                "external_feed_item.created",
                "shopify.customer.created",
                "shopify.customer.updated"
              ],
              "type": "string"
            },
            "required": false,
            "description": "Various types of events that are recorded by Buttondown, both in terms of exogenous systems\nlike Stripe and Memberful, and endogenous ones like email opens and clicks. (In general, if anything\nimportant ever happens that could be relevant to your newsletter, we have an event type for it!)\n\nThese event types power lots of things within Buttondown. They're used to trigger automations, webhooks,\nand analytics.\n\n(Note that Buttondown also has a different thing we call \"events\"; those are `EmailEvents` and are used\nfor tracking aggregate details about an email. Alas, we shouldn't have used the term \"event\" for two different\nthings, but it's too late to go back now!)\n\nIn general, our event namespacing tries to hew to the following pattern:\n\n<source>.<object>.<action>\n\nWhen wondering which object we are referring to, default to the _more granular_ object.\n\nFor instance, an email being sent to a subscriber is `subscriber.delivered`, not `email.sent`."
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Send a test event to a webhook",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/comments/{id}": {
      "get": {
        "operationId": "retrieve_comment",
        "summary": "Retrieve Comment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Retrieve a specific comment by its ID",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/comments": {
      "get": {
        "operationId": "list_comments",
        "summary": "List Comments",
        "parameters": [
          {
            "in": "query",
            "name": "comment_type",
            "schema": {
              "description": "If provided, only return comments of the given type.",
              "allOf": [
                {
                  "title": "Type",
                  "description": "An enumeration.",
                  "enum": [
                    "reviewer",
                    "subscriber"
                  ],
                  "type": "string"
                }
              ]
            },
            "required": true,
            "description": "If provided, only return comments of the given type."
          },
          {
            "in": "query",
            "name": "email_id",
            "schema": {
              "title": "Email Id",
              "description": "If provided, only return comments for the given email.",
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "If provided, only return comments for the given email."
          },
          {
            "in": "query",
            "name": "subscriber_id",
            "schema": {
              "title": "Subscriber Id",
              "description": "If provided, only return comments for the given subscriber.",
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "If provided, only return comments for the given subscriber."
          },
          {
            "in": "query",
            "name": "expand",
            "schema": {
              "title": "Expand",
              "description": "If provided, expand the given field. (Only supported fields: 'subscriber', 'email').",
              "type": "array",
              "items": {
                "enum": [
                  "subscriber",
                  "email"
                ],
                "type": "string"
              }
            },
            "required": false,
            "description": "If provided, expand the given field. (Only supported fields: 'subscriber', 'email')."
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "default": "-creation_date",
              "allOf": [
                {
                  "title": "Ordering",
                  "description": "An enumeration.",
                  "enum": [
                    "creation_date",
                    "-creation_date",
                    "email",
                    "-email",
                    "subscriber",
                    "-subscriber"
                  ],
                  "type": "string"
                }
              ]
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/survey_responses": {
      "get": {
        "operationId": "retrieve_survey_responses",
        "summary": "Retrieve Survey Responses",
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "schema": {
              "title": "Email",
              "description": "If provided, only return responses made to the given email.",
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "If provided, only return responses made to the given email."
          },
          {
            "in": "query",
            "name": "subscriber",
            "schema": {
              "title": "Subscriber",
              "description": "If provided, only return responses made by the given subscriber.",
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "If provided, only return responses made by the given subscriber."
          },
          {
            "in": "query",
            "name": "survey",
            "schema": {
              "title": "Survey",
              "description": "If provided, only return responses made to the given survey(s).",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "required": false,
            "description": "If provided, only return responses made to the given survey(s)."
          },
          {
            "in": "query",
            "name": "creation_date__start",
            "schema": {
              "title": "Creation Date  Start",
              "description": "If provided, only return responses made after the given date.",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "example": "2024-01-01",
              "type": "string"
            },
            "required": false,
            "description": "If provided, only return responses made after the given date."
          },
          {
            "in": "query",
            "name": "creation_date__end",
            "schema": {
              "title": "Creation Date  End",
              "description": "If provided, only return responses made before the given date.",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "example": "2024-01-01",
              "type": "string"
            },
            "required": false,
            "description": "If provided, only return responses made before the given date."
          },
          {
            "in": "query",
            "name": "expand",
            "schema": {
              "title": "Expand",
              "description": "If provided, expand the given field.",
              "type": "array",
              "items": {
                "enum": [
                  "email",
                  "subscriber",
                  "survey",
                  "automation"
                ],
                "type": "string"
              }
            },
            "required": false,
            "description": "If provided, expand the given field."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponsePage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "post": {
        "operationId": "create_survey_response",
        "summary": "Create Survey Response",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResponseInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/events": {
      "get": {
        "operationId": "list_events",
        "summary": "List Events",
        "parameters": [
          {
            "in": "query",
            "name": "event_type",
            "schema": {
              "$ref": "#/components/schemas/EmailEventType"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "default": "-creation_date",
              "allOf": [
                {
                  "title": "Ordering",
                  "description": "An enumeration.",
                  "enum": [
                    "creation_date",
                    "-creation_date"
                  ],
                  "type": "string"
                }
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "expand",
            "schema": {
              "title": "Expand",
              "description": "If provided, expand the given field. (Only supported field: 'subscriber').",
              "type": "array",
              "items": {
                "enum": [
                  "automation",
                  "subscriber",
                  "email"
                ],
                "type": "string"
              }
            },
            "required": false,
            "description": "If provided, expand the given field. (Only supported field: 'subscriber')."
          },
          {
            "in": "query",
            "name": "email_id",
            "schema": {
              "title": "Email Id",
              "type": "string",
              "format": "uuid"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "automation_id",
            "schema": {
              "title": "Automation Id",
              "type": "string",
              "format": "uuid"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "subscriber_id",
            "schema": {
              "title": "Subscriber Id",
              "type": "string",
              "format": "uuid"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailEventPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/events/{id}": {
      "get": {
        "operationId": "get_event",
        "summary": "Get Event",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "expand",
            "schema": {
              "title": "Expand",
              "description": "If provided, expand the given field. (Only supported field: 'subscriber').",
              "type": "array",
              "items": {
                "enum": [
                  "automation",
                  "subscriber",
                  "email"
                ],
                "type": "string"
              }
            },
            "required": false,
            "description": "If provided, expand the given field. (Only supported field: 'subscriber')."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailEvent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        },
        "description": "Retrieve a specific event by its ID",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/notes": {
      "post": {
        "operationId": "create_note_endpoint",
        "summary": "Create Note Endpoint",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NoteInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      },
      "get": {
        "operationId": "list_notes",
        "summary": "List Notes",
        "parameters": [
          {
            "in": "query",
            "name": "model_type",
            "schema": {
              "title": "Model Type",
              "description": "Filter notes by the type of object they are attached to.",
              "example": "email",
              "enum": [
                "email",
                "subscriber",
                "external_feed",
                "automation",
                "survey",
                "stripe_customer",
                "tag"
              ],
              "type": "string"
            },
            "required": false,
            "description": "Filter notes by the type of object they are attached to."
          },
          {
            "in": "query",
            "name": "model_id",
            "schema": {
              "title": "Model Id",
              "description": "Filter notes by the ID of the object they are attached to.",
              "example": "123",
              "type": "string"
            },
            "required": false,
            "description": "Filter notes by the ID of the object they are attached to."
          },
          {
            "in": "query",
            "name": "expand",
            "schema": {
              "title": "Expand",
              "description": "If provided, expand the given field.",
              "type": "array",
              "items": {
                "enum": [
                  "user"
                ],
                "type": "string"
              }
            },
            "required": false,
            "description": "If provided, expand the given field."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotePage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    },
    "/notes/{id}": {
      "delete": {
        "operationId": "delete_note_endpoint",
        "summary": "Delete Note Endpoint",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Delete a note",
        "security": [
          {
            "PermissionAuthenticationRequirement": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ExportCollection": {
        "title": "Collection",
        "description": "A group of data that can be exported in an export.",
        "enum": [
          "subscribers",
          "emails",
          "events",
          "referrals",
          "surveys",
          "comments",
          "requests",
          "mentions",
          "conversations",
          "images",
          "stripe_subscriptions",
          "stripe_products",
          "stripe_customers",
          "stripe_prices",
          "stripe_charges"
        ],
        "type": "string"
      },
      "ExportFormat": {
        "title": "Format",
        "description": "An enumeration.",
        "enum": [
          "csv",
          "json"
        ],
        "type": "string"
      },
      "ExportStatus": {
        "title": "Status",
        "description": "Represents the status of an export.\n\nNo action is required to move from one state or another; Buttondown\ninternally handles the transitions, and exposing the status is for\nobservability purposes only.",
        "enum": [
          "error",
          "in_progress",
          "not_started",
          "ready"
        ],
        "type": "string"
      },
      "Export": {
        "title": "Export",
        "description": "Some software applications may want programmatic access to their newsletter exports.\nThis assists with a few niche use cases, such as regular backups or data ingestion\n(into a data warehouse), or post-publishing processes that hinge on email events.\n\nIn general, you probably won't _need_ to use this endpoint unless you\n_absolutely_ need to use this endpoint.\n\nTo browse the contents of a given export collection, refer to the [Data exports](https://docs.buttondown.com/data-exports-subscriber) section\nof the documentation.",
        "type": "object",
        "properties": {
          "collections": {
            "description": "The [collections](https://docs.buttondown.com/api-exports-collections) of objects to export.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportCollection"
            }
          },
          "parameters": {
            "title": "Parameters",
            "description": "Parameters to pass to the exporter. These are specific to the collection and format, and constrain the export.",
            "type": "object"
          },
          "format": {
            "description": "The [format](https://docs.buttondown.com/api-exports-format) of the export files.",
            "default": "csv",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExportFormat"
              }
            ]
          },
          "columns": {
            "title": "Columns",
            "description": "If provided, the export will only include these columns.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "title": "Id",
            "description": "A unique UUID associated with the object.",
            "type": "string",
            "format": "uuid"
          },
          "creation_date": {
            "title": "Creation Date",
            "description": "The date and time at which the object was created.",
            "type": "string",
            "format": "date-time"
          },
          "url": {
            "title": "Url",
            "description": "The URL of the export file. This is only available after the export has completed.",
            "type": "string"
          },
          "completion_date": {
            "title": "Completion Date",
            "description": "The date and time the export completed.",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "description": "The status of the export.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExportStatus"
              }
            ]
          }
        },
        "required": [
          "collections",
          "id",
          "creation_date",
          "status"
        ]
      },
      "ErrorMessage": {
        "title": "ErrorMessage",
        "type": "object",
        "properties": {
          "code": {
            "title": "Code"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "detail"
        ]
      },
      "CreateExportErrorCode": {
        "title": "CreateExportErrorCode",
        "description": "An enumeration.",
        "enum": [
          "collection_empty_invalid",
          "columns_empty_invalid",
          "columns_invalid"
        ],
        "type": "string"
      },
      "ErrorMessage_CreateExportErrorCode_": {
        "title": "ErrorMessage[CreateExportErrorCode]",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/CreateExportErrorCode"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "code",
          "detail"
        ]
      },
      "ExportInput": {
        "title": "ExportInput",
        "type": "object",
        "properties": {
          "collections": {
            "description": "The [collections](https://docs.buttondown.com/api-exports-collections) of objects to export.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportCollection"
            }
          },
          "parameters": {
            "title": "Parameters",
            "description": "Parameters to pass to the exporter. These are specific to the collection and format, and constrain the export.",
            "type": "object"
          },
          "format": {
            "description": "The [format](https://docs.buttondown.com/api-exports-format) of the export files.",
            "default": "csv",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExportFormat"
              }
            ]
          },
          "columns": {
            "title": "Columns",
            "description": "If provided, the export will only include these columns.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "collections"
        ]
      },
      "ExportPage": {
        "title": "Page[Export]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Export"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "results",
          "count"
        ]
      },
      "Tag": {
        "title": "Tag",
        "description": "Tags are a way to organize your subscribers. You can create, update, and\ndelete tags via the API. You can also list all tags for a given newsletter.\n\nTags don't have any strict functionality on their own, but you can send emails\nto subscribers with a given tag (or to all subscribers _without_ a given tag.)",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "example": "VIP",
            "type": "string"
          },
          "color": {
            "title": "Color",
            "example": "#FFD700",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "secondary_id": {
            "title": "Secondary Id",
            "type": "integer"
          },
          "creation_date": {
            "title": "Creation Date",
            "description": "The date and time at which the object was first created.",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "name",
          "color",
          "id",
          "secondary_id",
          "creation_date"
        ]
      },
      "TagInput": {
        "title": "TagInput",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "example": "VIP",
            "type": "string"
          },
          "color": {
            "title": "Color",
            "example": "#FFD700",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        },
        "required": [
          "name",
          "color"
        ]
      },
      "TagPage": {
        "title": "Page[Tag]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "results",
          "count"
        ]
      },
      "UpdateTagErrorCode": {
        "title": "UpdateTagErrorCode",
        "description": "A potential error code that can be returned when updating a tag.",
        "enum": [
          "name_already_exists",
          "name_too_long"
        ],
        "type": "string"
      },
      "ErrorMessage_UpdateTagErrorCode_": {
        "title": "ErrorMessage[UpdateTagErrorCode]",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/UpdateTagErrorCode"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "code",
          "detail"
        ]
      },
      "TagUpdateInput": {
        "title": "TagUpdateInput",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "example": "VIP",
            "type": "string"
          },
          "color": {
            "title": "Color",
            "example": "#FFD700",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "secondary_id": {
            "title": "Secondary Id",
            "type": "integer"
          }
        }
      },
      "TagAnalytics": {
        "title": "TagAnalytics",
        "type": "object",
        "properties": {
          "created_subscribers": {
            "title": "Created Subscribers",
            "type": "integer"
          },
          "click_rate": {
            "title": "Click Rate",
            "type": "number"
          },
          "open_rate": {
            "title": "Open Rate",
            "type": "number"
          },
          "retention": {
            "title": "Retention",
            "type": "number"
          }
        },
        "required": [
          "created_subscribers",
          "click_rate",
          "open_rate",
          "retention"
        ]
      },
      "Empty": {
        "title": "Empty",
        "type": "object",
        "properties": {}
      },
      "Account": {
        "title": "Account",
        "type": "object",
        "properties": {
          "username": {
            "title": "Username",
            "type": "string"
          },
          "email_address": {
            "title": "Email Address",
            "type": "string"
          }
        },
        "required": [
          "username",
          "email_address"
        ]
      },
      "Image": {
        "title": "Image",
        "description": "Images are, well, images! Buttondown allows you to upload images to its secure\nS3 bucket and do with them what you will. This is sort of an odd duck of an\nAPI, to be sure, but if you want to be able to do things like draft\nand send emails completely on your iPad you need a surefire way of creating images.",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "creation_date": {
            "title": "Creation Date",
            "description": "The date and time at which the object was first created.",
            "type": "string",
            "format": "date-time"
          },
          "image": {
            "title": "Image",
            "description": "The URL of the image.",
            "example": "https://placekitten.com/408/287",
            "type": "string"
          }
        },
        "required": [
          "id",
          "creation_date",
          "image"
        ]
      },
      "ImagePage": {
        "title": "Page[Image]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "results",
          "count"
        ]
      },
      "Attachment": {
        "title": "Attachment",
        "description": "Attachments are files that can be included with your emails. Buttondown allows\nyou to upload attachments to its secure S3 bucket and attach them to your emails.\nSupported file types include documents, images, audio files, and more.",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "string"
              }
            ]
          },
          "creation_date": {
            "title": "Creation Date",
            "description": "The date and time at which the object was first created.",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "title": "Name",
            "description": "The name of the attachment.",
            "example": "newsletter-guide.pdf",
            "type": "string"
          },
          "file": {
            "title": "File",
            "description": "The URL of the attachment file.",
            "example": "https://buttondown.s3.amazonaws.com/attachments/newsletter-guide.pdf",
            "type": "string"
          }
        },
        "required": [
          "id",
          "creation_date",
          "name",
          "file"
        ]
      },
      "AttachmentPage": {
        "title": "Page[Attachment]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "results",
          "count"
        ]
      },
      "Analytics": {
        "title": "Analytics",
        "type": "object",
        "properties": {
          "recipients": {
            "title": "Recipients",
            "default": 0,
            "type": "integer"
          },
          "deliveries": {
            "title": "Deliveries",
            "default": 0,
            "type": "integer"
          },
          "opens": {
            "title": "Opens",
            "default": 0,
            "type": "integer"
          },
          "clicks": {
            "title": "Clicks",
            "default": 0,
            "type": "integer"
          },
          "temporary_failures": {
            "title": "Temporary Failures",
            "default": 0,
            "type": "integer"
          },
          "permanent_failures": {
            "title": "Permanent Failures",
            "default": 0,
            "type": "integer"
          },
          "unsubscriptions": {
            "title": "Unsubscriptions",
            "default": 0,
            "type": "integer"
          },
          "complaints": {
            "title": "Complaints",
            "default": 0,
            "type": "integer"
          },
          "survey_responses": {
            "title": "Survey Responses",
            "default": 0,
            "type": "integer"
          },
          "webmentions": {
            "title": "Webmentions",
            "default": 0,
            "type": "integer"
          },
          "page_views_lifetime": {
            "title": "Page Views Lifetime",
            "default": 0,
            "type": "integer"
          },
          "page_views_30": {
            "title": "Page Views 30",
            "default": 0,
            "type": "integer"
          },
          "page_views_7": {
            "title": "Page Views 7",
            "default": 0,
            "type": "integer"
          },
          "subscriptions": {
            "title": "Subscriptions",
            "default": 0,
            "type": "integer"
          },
          "paid_subscriptions": {
            "title": "Paid Subscriptions",
            "default": 0,
            "type": "integer"
          },
          "replies": {
            "title": "Replies",
            "default": 0,
            "type": "integer"
          },
          "comments": {
            "title": "Comments",
            "default": 0,
            "type": "integer"
          },
          "social_mentions": {
            "title": "Social Mentions",
            "default": 0,
            "type": "integer"
          }
        }
      },
      "EmailCommentingMode": {
        "title": "CommentingMode",
        "description": "Governs who can comment on this email.\n\nThis enum replaces the `is_comments_disabled` field, which has been deprecated. (Also note that this field may be superseded by newsletter-level settings; for instance, \"enabled\" is an invalid and inert value if the newsletter itself has comments disabled.)",
        "enum": [
          "disabled",
          "enabled",
          "enabled_for_paid_subscribers"
        ],
        "type": "string"
      },
      "EmailType": {
        "title": "Type",
        "description": "Represents the audience of an email, and to whom it is visible both in the initial\nemail and in online archives.",
        "enum": [
          "public",
          "private",
          "premium",
          "free",
          "churned",
          "archival"
        ],
        "type": "string"
      },
      "Operator": {
        "title": "Operator",
        "description": "An enumeration.",
        "enum": [
          "equals",
          "not_equals",
          "contains",
          "not_contains",
          "is_empty",
          "is_not_empty",
          "greater_than",
          "less_than"
        ],
        "type": "string"
      },
      "Filter": {
        "title": "Filter",
        "description": "A filter is a single condition that can be evaluated against a [Subscriber](/api-subscribers-retrieve). It has a field, an operator, and a value:\n\n```json\n{\n    \"field\": \"subscriber.tags\",\n    \"operator\": \"contains\",\n    \"value\": \"executive\"\n}\n```\n\nThe field is the path to the field on the subscriber to evaluate. The operator is the operator to use when evaluating the filter. The value is the value to compare the field to.",
        "type": "object",
        "properties": {
          "field": {
            "title": "Field",
            "type": "string"
          },
          "operator": {
            "$ref": "#/components/schemas/Operator"
          },
          "value": {
            "title": "Value",
            "type": "string"
          }
        },
        "required": [
          "field",
          "operator",
          "value"
        ]
      },
      "FilterGroup": {
        "title": "FilterGroup",
        "description": "Buttondown's filtering schema can be used for multiple things:\n\n- Filtering [the audience of an email](/api-emails-create) to a specific subset\n- Creating [finely-tuned automations](/api-automation-introduction)\n\nFilters are fractal; they can be nested in groups, and groups can be nested in other groups. This is accomplished through a tree-like structure. Every \"FilterGroup\" has a \"predicate\" field, which is either \"and\" or \"or\", which determines how the filters and groups within the group are combined, a \"groups\" field, which is a list of \"FilterGroup\" objects (that's that recursive bit!), and a \"filters\" field, which are the leaf-level filters themselves.\n\nLet's say you want a simple filter: all subscribers who have a tag called \"executive\". You can do that like this:\n\n```json\n{\n    \"filters\": [{\"field\": \"subscriber.tags\", \"operator\": \"contains\", \"value\": \"executive\"}],\n    \"groups\": [],\n    \"predicate\": \"and\"\n}\n```\n\nNow, let's say you want to filter for subscribers who have a tag called \"executive\" and a tag called \"general-electric\". You can do that like this:\n\n```json\n{\n    \"filters\": [{\"field\": \"subscriber.tags\", \"operator\": \"contains\", \"value\": \"executive\"}, {\"field\": \"subscriber.tags\", \"operator\": \"contains\", \"value\": \"general-electric\"}],\n    \"groups\": [],\n    \"predicate\": \"and\"\n}\n```\n\nIf you wanted to change that `and` to an `or`, you can do that like this:\n\n```json\n{\n    \"filters\": [{\"field\": \"subscriber.tags\", \"operator\": \"contains\", \"value\": \"executive\"}, {\"field\": \"subscriber.tags\", \"operator\": \"contains\", \"value\": \"general-electric\"}],\n    \"groups\": [],\n    \"predicate\": \"or\"\n}\n```\n\nNow, let's say you want to filter for subscribers who have a tag called \"executive\" _or_ a tag called \"general-electric\" and a tag called \"admin\". This is where the whole nested thing comes in handy. You can do that like this:\n\n```json\n{\n    \"filters\": [{\"field\": \"subscriber.tags\", \"operator\": \"contains\", \"value\": \"executive\"}],\n    \"groups\": [\n        {\n            \"filters\": [{\"field\": \"subscriber.tags\", \"operator\": \"contains\", \"value\": \"admin\"}, {\"field\": \"subscriber.tags\", \"operator\": \"contains\", \"value\": \"general-electric\"}],\n            \"groups\": [],\n            \"predicate\": \"and\"\n        }\n    ],\n    \"predicate\": \"or\"\n}\n```\n\nYou can read more about the specific filter construction in the [Filter documentation](/api-emails-filter).",
        "type": "object",
        "properties": {
          "filters": {
            "title": "Filters",
            "description": "The leaf-level filters to apply to the audience.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            }
          },
          "groups": {
            "title": "Groups",
            "description": "The nested groups to apply to the audience.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterGroup"
            }
          },
          "predicate": {
            "title": "Predicate",
            "description": "The logical operator to use when combining filters (either 'and' or 'or').",
            "enum": [
              "and",
              "or"
            ],
            "type": "string"
          }
        },
        "required": [
          "filters",
          "groups",
          "predicate"
        ]
      },
      "EmailSource": {
        "title": "Source",
        "description": "Represents the original provenance of an email. This value is not exposed\nto subscribers, but does determine some behavior of the email (e.g. whether\nor not analytics can be calculated.)",
        "enum": [
          "api",
          "import",
          "app",
          "external_feed"
        ],
        "type": "string"
      },
      "EmailStatus": {
        "title": "Status",
        "description": "Represents the state of an email.\n\nNo action is required to move from one state or another; Buttondown\ninternally handles the transitions, and exposing the status is for\nobservability purposes only.",
        "enum": [
          "draft",
          "managed_by_rss",
          "about_to_send",
          "scheduled",
          "in_flight",
          "paused",
          "deleted",
          "errored",
          "sent",
          "imported",
          "throttled",
          "resending",
          "transactional",
          "suppressed"
        ],
        "type": "string"
      },
      "EmailSuppressionReason": {
        "title": "SuppressionReason",
        "description": "Represents the reason an email was suppressed.",
        "enum": [
          "law_enforcement",
          "internal_auditing"
        ],
        "type": "string"
      },
      "NewsletterEmailTemplate": {
        "title": "EmailTemplate",
        "description": "Represents the template of an email.\n\nEach template has a different layout/style; you can view screenshots and examples [in the docs](https://docs.buttondown.com/customizing-email-design#buttondowns-default-templates).",
        "enum": [
          "classic",
          "modern",
          "plaintext",
          "naked"
        ],
        "type": "string"
      },
      "Email": {
        "title": "Email",
        "description": "Emails are why you're here on Buttondown, right?\nCreating an email via the API is just like creating one in the interface;\nit will instantly trigger sending actual emails,\nbased on the tags and email type you provide.\n\nRelevant changes to the schema:\n\n- [2024-08-15](https://docs.buttondown.com/api-changelog-2024-08-15): unshipped the `included_tags` and `excluded_tags` fields.\n- [2024-12-30](https://docs.buttondown.com/api-changelog-2024-12-30): unshipped the `is_comments_disabled` field, and replaced it with a more flexible `commenting_mode` field.\n- [2025-09-23](https://docs.buttondown.com/api-changelog-2025-09-23): increased the maximum length of the `subject` field from 1000 to 2000 characters.",
        "type": "object",
        "properties": {
          "absolute_url": {
            "title": "Absolute Url",
            "type": "string"
          },
          "analytics": {
            "$ref": "#/components/schemas/Analytics"
          },
          "attachments": {
            "title": "Attachments",
            "description": "A list of attachment IDs present on the email. (See [Attachments](https://docs.buttondown.com/api-attachments-introduction) for more information.)",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string"
                }
              ]
            }
          },
          "body": {
            "title": "Body",
            "description": "The body of the email. Can be either HTML or markdown.",
            "type": "string"
          },
          "canonical_url": {
            "title": "Canonical Url",
            "description": "The URL of the original source of the content.",
            "type": "string"
          },
          "commenting_mode": {
            "$ref": "#/components/schemas/EmailCommentingMode"
          },
          "creation_date": {
            "title": "Creation Date",
            "description": "The date and time at which the object was first created.",
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "title": "Description",
            "description": "A human-readable description of the email, used for archives and SEO.",
            "type": "string"
          },
          "email_type": {
            "default": "public",
            "allOf": [
              {
                "$ref": "#/components/schemas/EmailType"
              }
            ]
          },
          "featured": {
            "title": "Featured",
            "description": "Designated whether or not this email should be highlighted within the archives. (Currently unused.)",
            "type": "boolean"
          },
          "filters": {
            "$ref": "#/components/schemas/FilterGroup"
          },
          "id": {
            "title": "Id",
            "description": "The unique identifier for the email.",
            "example": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
            "type": "string",
            "format": "uuid"
          },
          "image": {
            "title": "Image",
            "description": "A primary image to be used when previewing the email on the web or in other contexts.",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "description": "A structured key-value blob that you can use to store arbitrary data on the object. (You can [read more about metadata.](https://docs.buttondown.com/metadata))",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "modification_date": {
            "title": "Modification Date",
            "description": "The date and time at which the object was last modified.",
            "type": "string",
            "format": "date-time"
          },
          "publish_date": {
            "title": "Publish Date",
            "description": "The date and time at which the email should be published in the future (for scheduled emails), or the date and time at which the email was published (for sent emails).",
            "type": "string",
            "format": "date-time"
          },
          "related_email_ids": {
            "title": "Related Email Ids",
            "description": "A list of email IDs that are related to this email. Related emails are shown at the bottom of the email and archive pages.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "secondary_id": {
            "title": "Secondary Id",
            "description": "An informal 'number' for the email, used in some templates ('This was issue #123').",
            "type": "integer"
          },
          "should_trigger_pay_per_email_billing": {
            "title": "Should Trigger Pay Per Email Billing",
            "description": "Whether this email should trigger pay-per-email billing for paid subscribers. Use this to differentiate between free updates and premium newsletters.",
            "type": "boolean"
          },
          "slug": {
            "title": "Slug",
            "description": "A short, human-readable identifier for the email. (Used in the URL of the email, and in the 'slug' field of the email object.)",
            "example": "welcome-to-the-newsletter",
            "type": "string"
          },
          "source": {
            "description": "The source of the email.",
            "example": "app",
            "allOf": [
              {
                "$ref": "#/components/schemas/EmailSource"
              }
            ]
          },
          "status": {
            "description": "The current status of the email.",
            "example": "draft",
            "allOf": [
              {
                "$ref": "#/components/schemas/EmailStatus"
              }
            ]
          },
          "subject": {
            "title": "Subject",
            "description": "The subject line for the email.",
            "maxLength": 2000,
            "type": "string"
          },
          "suppression_reason": {
            "description": "Reason for suppression, if email is suppressed.",
            "allOf": [
              {
                "$ref": "#/components/schemas/EmailSuppressionReason"
              }
            ]
          },
          "template": {
            "description": "If present, this template overrides your newsletter's default template.",
            "allOf": [
              {
                "$ref": "#/components/schemas/NewsletterEmailTemplate"
              }
            ]
          }
        },
        "required": [
          "absolute_url",
          "body",
          "canonical_url",
          "commenting_mode",
          "creation_date",
          "description",
          "featured",
          "filters",
          "id",
          "image",
          "modification_date",
          "related_email_ids",
          "should_trigger_pay_per_email_billing",
          "source",
          "status",
          "subject"
        ]
      },
      "EmailCreationErrorCode": {
        "title": "EmailCreationErrorCode",
        "description": "Represents the type of error that occurred when creating an email.\n\nHuman-readable error messages are provided in the `detail` field of the response;\nthese values are meant to be parseable by code or client logic.",
        "enum": [
          "subject_invalid",
          "email_duplicate",
          "email_invalid",
          "body_invalid",
          "publish_date_invalid",
          "publish_date_missing",
          "status_invalid",
          "slug_invalid",
          "canonical_url_invalid",
          "tag_invalid"
        ],
        "type": "string"
      },
      "ErrorMessage_EmailCreationErrorCode_": {
        "title": "ErrorMessage[EmailCreationErrorCode]",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/EmailCreationErrorCode"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "code",
          "detail"
        ]
      },
      "EmailInput": {
        "title": "EmailInput",
        "type": "object",
        "properties": {
          "attachments": {
            "title": "Attachments",
            "default": [],
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string"
                }
              ]
            }
          },
          "publish_date": {
            "title": "Publish Date",
            "type": "string",
            "format": "date-time"
          },
          "subject": {
            "title": "Subject",
            "maxLength": 2000,
            "example": "The subject line for the email",
            "type": "string"
          },
          "slug": {
            "title": "Slug",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "default": "",
            "type": "string"
          },
          "canonical_url": {
            "title": "Canonical Url",
            "default": "",
            "type": "string"
          },
          "image": {
            "title": "Image",
            "default": "",
            "type": "string"
          },
          "body": {
            "title": "Body",
            "description": "Can be either HTML or markdown.",
            "default": "",
            "example": "This is an example of the body of an email.",
            "type": "string"
          },
          "email_type": {
            "default": "public",
            "allOf": [
              {
                "$ref": "#/components/schemas/EmailType"
              }
            ]
          },
          "status": {
            "default": "about_to_send",
            "allOf": [
              {
                "$ref": "#/components/schemas/EmailStatus"
              }
            ]
          },
          "metadata": {
            "title": "Metadata",
            "description": "A structured key-value blob that you can use to store arbitrary data on the object. (You can [read more about metadata.](https://docs.buttondown.com/metadata))",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "secondary_id": {
            "title": "Secondary Id",
            "type": "integer"
          },
          "filters": {
            "title": "Filters",
            "default": {
              "filters": [],
              "groups": [],
              "predicate": "and"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/FilterGroup"
              }
            ]
          },
          "commenting_mode": {
            "default": "enabled",
            "allOf": [
              {
                "$ref": "#/components/schemas/EmailCommentingMode"
              }
            ]
          },
          "related_email_ids": {
            "title": "Related Email Ids",
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "featured": {
            "title": "Featured",
            "description": "Designated whether or not this email should be highlighted within the archives. (Currently unused.)",
            "default": false,
            "type": "boolean"
          },
          "should_trigger_pay_per_email_billing": {
            "title": "Should Trigger Pay Per Email Billing",
            "description": "Whether this email should trigger pay-per-email billing for paid subscribers. Use this to differentiate between free updates and premium newsletters.",
            "default": false,
            "type": "boolean"
          }
        },
        "required": [
          "subject"
        ]
      },
      "EmailPage": {
        "title": "Page[Email]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Email"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "results",
          "count"
        ]
      },
      "EmailListErrorCode": {
        "title": "EmailListErrorCode",
        "description": "Represents the type of error that occurred when listing emails.\n\nHuman-readable error messages are provided in the `detail` field of the response;\nthese values are meant to be parseable by code or client logic.",
        "enum": [
          "creation_date_invalid",
          "publish_date_invalid"
        ],
        "type": "string"
      },
      "ErrorMessage_EmailListErrorCode_": {
        "title": "ErrorMessage[EmailListErrorCode]",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/EmailListErrorCode"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "code",
          "detail"
        ]
      },
      "EmailUpdateInput": {
        "title": "EmailUpdateInput",
        "type": "object",
        "properties": {
          "attachments": {
            "title": "Attachments",
            "description": "A list of attachment IDs present on the email. (See [Attachments](https://docs.buttondown.com/api-attachments-introduction) for more information.)",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string"
                }
              ]
            }
          },
          "publish_date": {
            "title": "Publish Date",
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "enum": [
                  "none"
                ],
                "type": "string"
              }
            ]
          },
          "subject": {
            "title": "Subject",
            "description": "The subject line for the email.",
            "maxLength": 2000,
            "example": "The subject line for the email",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "description": "A human-readable description of the email, used for archives and SEO.",
            "type": "string"
          },
          "canonical_url": {
            "title": "Canonical Url",
            "description": "The URL of the original source of the content.",
            "example": "https://sheinhardtwig.com/2025/01/17/our-nbc-partnership",
            "type": "string"
          },
          "body": {
            "title": "Body",
            "description": "Can be either HTML or markdown.",
            "example": "This is an example of the body of an email.",
            "type": "string"
          },
          "email_type": {
            "description": "The type of email to create. Defaults to `PUBLIC`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/EmailType"
              }
            ]
          },
          "status": {
            "$ref": "#/components/schemas/EmailStatus"
          },
          "suppression_reason": {
            "$ref": "#/components/schemas/EmailSuppressionReason"
          },
          "metadata": {
            "title": "Metadata",
            "description": "A structured key-value blob that you can use to store arbitrary data on the object. (You can [read more about metadata.](https://docs.buttondown.com/metadata))",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "image": {
            "title": "Image",
            "default": "",
            "type": "string"
          },
          "slug": {
            "title": "Slug",
            "example": "hello-world",
            "type": "string"
          },
          "secondary_id": {
            "title": "Secondary Id",
            "type": "integer"
          },
          "filters": {
            "$ref": "#/components/schemas/FilterGroup"
          },
          "template": {
            "title": "Template",
            "anyOf": [
              {
                "$ref": "#/components/schemas/NewsletterEmailTemplate"
              },
              {
                "enum": [
                  "none"
                ],
                "type": "string"
              }
            ]
          },
          "commenting_mode": {
            "$ref": "#/components/schemas/EmailCommentingMode"
          },
          "related_email_ids": {
            "title": "Related Email Ids",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "featured": {
            "title": "Featured",
            "description": "Designated whether or not this email should be highlighted within the archives. (Currently unused.)",
            "type": "boolean"
          },
          "should_trigger_pay_per_email_billing": {
            "title": "Should Trigger Pay Per Email Billing",
            "description": "Whether this email should trigger pay-per-email billing for paid subscribers. Use this to differentiate between free updates and premium newsletters.",
            "type": "boolean"
          }
        }
      },
      "AccessLevel": {
        "title": "AccessLevel",
        "description": "An enumeration.",
        "enum": [
          "none",
          "read",
          "write"
        ],
        "type": "string"
      },
      "Permissions": {
        "title": "Permissions",
        "type": "object",
        "properties": {
          "subscriber": {
            "default": "none",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccessLevel"
              }
            ]
          },
          "email": {
            "default": "none",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccessLevel"
              }
            ]
          },
          "sending": {
            "default": "none",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccessLevel"
              }
            ]
          },
          "styling": {
            "default": "none",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccessLevel"
              }
            ]
          },
          "administrivia": {
            "default": "none",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccessLevel"
              }
            ]
          },
          "automations": {
            "default": "none",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccessLevel"
              }
            ]
          },
          "surveys": {
            "default": "none",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccessLevel"
              }
            ]
          }
        }
      },
      "InvitationStatus": {
        "title": "Status",
        "description": "An enumeration.",
        "enum": [
          "pending",
          "accepted",
          "declined",
          "revoked",
          "owner"
        ],
        "type": "string"
      },
      "User": {
        "title": "User",
        "type": "object",
        "properties": {
          "permissions": {
            "$ref": "#/components/schemas/Permissions"
          },
          "email_address": {
            "title": "Email Address",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "A unique UUID associated with the object.",
            "type": "string",
            "format": "uuid"
          },
          "creation_date": {
            "title": "Creation Date",
            "description": "The date and time at which the object was created.",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/InvitationStatus"
          },
          "last_logged_in": {
            "title": "Last Logged In",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "permissions",
          "email_address",
          "id",
          "creation_date",
          "status"
        ]
      },
      "History": {
        "title": "History",
        "type": "object",
        "properties": {
          "history_id": {
            "title": "History Id",
            "type": "integer"
          },
          "creation_date": {
            "title": "Creation Date",
            "description": "The date and time at which the object was first created.",
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "title": "Value",
            "type": "string"
          },
          "user_id": {
            "title": "User Id",
            "type": "string",
            "format": "uuid"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "history_id",
          "creation_date",
          "value"
        ]
      },
      "HistoryPage": {
        "title": "Page[History]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/History"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "results",
          "count"
        ]
      },
      "SendDraftInput": {
        "title": "SendDraftInput",
        "type": "object",
        "properties": {
          "subscribers": {
            "title": "Subscribers",
            "description": "A list of subscriber ids to which to send the email.",
            "example": [
              "bc5601f4-b180-4e02-8501-c18080662376",
              "24ee3338-daaf-42b0-bf7b-0cab38972fe5"
            ],
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "recipients": {
            "title": "Recipients",
            "description": "A list of email addresses to send the email to.",
            "example": [
              "telemachus@buttondown.email"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SubscriberSource": {
        "title": "Source",
        "description": "Represents the original provenance of a subscriber. This value is not exposed\nto subscribers; it's only used for internal tracking purposes and governs some\nof the behavior of the subscriber (i.e. whether or not to require double\nopt-in.)",
        "enum": [
          "admin",
          "api",
          "carrd",
          "comment",
          "import",
          "organic",
          "stripe",
          "user",
          "zapier"
        ],
        "type": "string"
      },
      "StripeCoupon": {
        "title": "StripeCoupon",
        "type": "object",
        "properties": {
          "coupon_id": {
            "title": "Coupon Id",
            "type": "string"
          },
          "percent_off": {
            "title": "Percent Off",
            "type": "string"
          },
          "amount_off": {
            "title": "Amount Off",
            "type": "integer"
          },
          "name": {
            "title": "Name",
            "type": "string"
          }
        },
        "required": [
          "coupon_id"
        ]
      },
      "SubscriberType": {
        "title": "Type",
        "description": "Represents the state of a subscriber and what emails they\nshould or should not be receiving. This type is meant to be fully expressive\nso as to consolidate the logic of determining what emails a subscriber should\nreceive into a single place.\n\nNote that the only types that can be set programmatically are REGULAR, UNSUBSCRIBED,\nGIFTED and UNPAID. All other types are meant to be user-visible and cannot\nbe set programmatically.",
        "enum": [
          "regular",
          "premium",
          "churning",
          "past_due",
          "gifted",
          "unpaid",
          "churned",
          "unactivated",
          "unsubscribed",
          "complained",
          "undeliverable",
          "removed",
          "trialed",
          "paused",
          "blocked"
        ],
        "type": "string"
      },
      "Transition": {
        "title": "Transition",
        "type": "object",
        "properties": {
          "date": {
            "title": "Date",
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "$ref": "#/components/schemas/SubscriberType"
          }
        },
        "required": [
          "date",
          "type"
        ]
      },
      "SubscriberUndeliverabilityReason": {
        "title": "UndeliverabilityReason",
        "description": "The reason Buttondown has marked the subscriber as undeliverable.\nUndeliverable subscribers are not sent emails, and may be periodically removed from the system (or restored, if the reason is no longer valid.)",
        "enum": [
          "email_blocked",
          "ip_blocked",
          "ip_undeliverable",
          "out_of_storage",
          "disabled",
          "unreachable",
          "access_denied",
          "does_not_exist",
          "rate_limited",
          "spam",
          "problematic_url",
          "on_esp_denylist",
          "domain_blocked",
          "spf_failed",
          "malformed",
          "other"
        ],
        "type": "string"
      },
      "Subscriber": {
        "title": "Subscriber",
        "description": "Subscribers are the main way you collect email addresses and\nrecipients on Buttondown. They're what you see on your\n[subscribers page](https://buttondown.com/subscribers).\n\nRelevant changes to the schema:\n\n- [2024-08-01](https://docs.buttondown.com/api-changelog-2024-08-01): renamed `subscriber_type` and `email` to `type` and `email_address` respectively.\n- [2024-07-13](https://docs.buttondown.com/api-changelog-2024-08-01): removed `external_url` in favor of `absolute_url`.",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "description": "A unique UUID associated with the object.",
            "type": "string",
            "format": "uuid"
          },
          "creation_date": {
            "title": "Creation Date",
            "description": "The date and time at which the object was created.",
            "type": "string",
            "format": "date-time"
          },
          "avatar_url": {
            "title": "Avatar Url",
            "type": "string"
          },
          "churn_date": {
            "title": "Churn Date",
            "type": "string",
            "format": "date-time"
          },
          "email_address": {
            "title": "Email Address",
            "description": "The email address of the subscriber.",
            "maxLength": 254,
            "pattern": "^[a-zA-Z0-9._%+\\-!]+@[a-zA-Z0-9.\\-]+\\.[a-zA-Z]{2,}$",
            "example": "telemachus@buttondown.email",
            "type": "string"
          },
          "gift_subscription_message": {
            "title": "Gift Subscription Message",
            "description": "A custom message that was sent to the subscriber when the gift subscription was created.",
            "type": "string"
          },
          "ip_address": {
            "title": "Ip Address",
            "type": "string"
          },
          "last_click_date": {
            "title": "Last Click Date",
            "type": "string",
            "format": "date-time"
          },
          "last_open_date": {
            "title": "Last Open Date",
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "title": "Metadata",
            "description": "A structured key-value blob that you can use to store arbitrary data on the object. (You can [read more about metadata.](https://docs.buttondown.com/metadata))",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "notes": {
            "title": "Notes",
            "description": "Any notes you want to attach to the subscriber. These are not publicly visible.",
            "default": "",
            "type": "string"
          },
          "referral_code": {
            "title": "Referral Code",
            "type": "string"
          },
          "referrer_url": {
            "title": "Referrer Url",
            "default": "",
            "type": "string"
          },
          "risk_score": {
            "title": "Risk Score",
            "description": "The risk score of the subscriber. Positive numbers represent a higher risk; negative numbers represent a lower risk.",
            "type": "number"
          },
          "secondary_id": {
            "title": "Secondary Id",
            "type": "integer"
          },
          "source": {
            "$ref": "#/components/schemas/SubscriberSource"
          },
          "stripe_coupon": {
            "$ref": "#/components/schemas/StripeCoupon"
          },
          "stripe_customer_id": {
            "title": "Stripe Customer Id",
            "type": "string"
          },
          "subscriber_import_id": {
            "title": "Subscriber Import Id",
            "type": "string",
            "format": "uuid"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "transitions": {
            "title": "Transitions",
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transition"
            }
          },
          "type": {
            "$ref": "#/components/schemas/SubscriberType"
          },
          "undeliverability_date": {
            "title": "Undeliverability Date",
            "type": "string",
            "format": "date-time"
          },
          "undeliverability_reason": {
            "description": "The reason the subscriber is undeliverable. (Only populated for undeliverable subscribers.)",
            "allOf": [
              {
                "$ref": "#/components/schemas/SubscriberUndeliverabilityReason"
              }
            ]
          },
          "unsubscription_date": {
            "title": "Unsubscription Date",
            "type": "string",
            "format": "date-time"
          },
          "unsubscription_reason": {
            "title": "Unsubscription Reason",
            "type": "string"
          },
          "upgrade_date": {
            "title": "Upgrade Date",
            "type": "string",
            "format": "date-time"
          },
          "utm_campaign": {
            "title": "Utm Campaign",
            "type": "string"
          },
          "utm_medium": {
            "title": "Utm Medium",
            "type": "string"
          },
          "utm_source": {
            "title": "Utm Source",
            "type": "string"
          },
          "stripe_customer": {
            "title": "Stripe Customer",
            "type": "object"
          }
        },
        "required": [
          "id",
          "creation_date",
          "email_address",
          "referral_code",
          "secondary_id",
          "source",
          "tags",
          "type",
          "utm_campaign",
          "utm_medium",
          "utm_source"
        ]
      },
      "SubscriberInputValidationErrorCode": {
        "title": "ValidationErrorCode",
        "description": "Represents the type of error that occurred when validating subscriber input.\n\nHuman-readable error messages are provided in the `detail` field of the response;\nthese values are meant to be parseable by code or client logic.",
        "enum": [
          "email_already_exists",
          "email_blocked",
          "email_empty",
          "email_invalid",
          "ip_address_spammy",
          "metadata_invalid",
          "rate_limited",
          "subscriber_already_exists",
          "subscriber_blocked",
          "subscriber_suppressed",
          "tag_invalid"
        ],
        "type": "string"
      },
      "ErrorMessage_ValidationErrorCode_": {
        "title": "ErrorMessage[ValidationErrorCode]",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/SubscriberInputValidationErrorCode"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "code",
          "detail"
        ]
      },
      "SubscriberInput": {
        "title": "SubscriberInput",
        "type": "object",
        "properties": {
          "email_address": {
            "title": "Email Address",
            "description": "The email address of the subscriber.",
            "maxLength": 254,
            "pattern": "^[a-zA-Z0-9._%+\\-!]+@[a-zA-Z0-9.\\-]+\\.[a-zA-Z]{2,}$",
            "example": "telemachus@buttondown.email",
            "type": "string"
          },
          "notes": {
            "title": "Notes",
            "description": "Any notes you want to attach to the subscriber. These are not publicly visible.",
            "default": "",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "description": "A structured key-value blob that you can use to store arbitrary data on the object. (You can [read more about metadata.](https://docs.buttondown.com/metadata))",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "tags": {
            "title": "Tags",
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "referrer_url": {
            "title": "Referrer Url",
            "default": "",
            "type": "string"
          },
          "utm_campaign": {
            "title": "Utm Campaign",
            "default": "",
            "type": "string"
          },
          "utm_medium": {
            "title": "Utm Medium",
            "default": "",
            "type": "string"
          },
          "utm_source": {
            "title": "Utm Source",
            "default": "",
            "type": "string"
          },
          "referring_subscriber_id": {
            "title": "Referring Subscriber Id",
            "description": "The ID of the subscriber that referred this subscriber.",
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "example": "regular",
            "allOf": [
              {
                "$ref": "#/components/schemas/SubscriberType"
              }
            ]
          },
          "ip_address": {
            "title": "Ip Address",
            "description": "The IP address of the subscriber. If provided, we will use this IP address to determine the subscriber's location and validate their legitimacy.",
            "pattern": "^[^\\s]+$",
            "example": "127.0.0.1",
            "type": "string"
          }
        },
        "required": [
          "email_address"
        ]
      },
      "SubscriberPage": {
        "title": "Page[Subscriber]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subscriber"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "results",
          "count"
        ]
      },
      "ListSubscribersErrorCode": {
        "title": "ListSubscribersErrorCode",
        "description": "Represents the type of error that occurred when listing subscribers.\n\nHuman-readable error messages are provided in the `detail` field of the response;\nthese values are meant to be parseable by code or client logic.",
        "enum": [
          "invalid_tag",
          "date_invalid",
          "invalid_ordering"
        ],
        "type": "string"
      },
      "ErrorMessage_ListSubscribersErrorCode_": {
        "title": "ErrorMessage[ListSubscribersErrorCode]",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/ListSubscribersErrorCode"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "code",
          "detail"
        ]
      },
      "UpdateSubscriberErrorCode": {
        "title": "UpdateSubscriberErrorCode",
        "description": "Represents the type of error that occurred when updating a subscriber.\n\nHuman-readable error messages are provided in the `detail` field of the response;\nthese values are meant to be parseable by code or client logic.",
        "enum": [
          "email_already_exists",
          "email_invalid",
          "email_has_been_changed_too_many_times",
          "subscriber_type_invalid",
          "tag_invalid"
        ],
        "type": "string"
      },
      "ErrorMessage_UpdateSubscriberErrorCode_": {
        "title": "ErrorMessage[UpdateSubscriberErrorCode]",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/UpdateSubscriberErrorCode"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "code",
          "detail"
        ]
      },
      "SubscriberUpdateInput": {
        "title": "SubscriberUpdateInput",
        "type": "object",
        "properties": {
          "email_address": {
            "title": "Email Address",
            "description": "The email address of the subscriber.",
            "maxLength": 254,
            "pattern": "^[a-zA-Z0-9._%+\\-!]+@[a-zA-Z0-9.\\-]+\\.[a-zA-Z]{2,}$",
            "example": "telemachus@buttondown.email",
            "type": "string"
          },
          "notes": {
            "title": "Notes",
            "description": "Any notes you want to attach to the subscriber. These are not publicly visible.",
            "example": "One of our first subscribers!",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "description": "A structured key-value blob that you can use to store arbitrary data on the object. (You can [read more about metadata.](https://docs.buttondown.com/metadata))",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "referrer_url": {
            "title": "Referrer Url",
            "default": "",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/SubscriberType"
          },
          "unsubscription_reason": {
            "title": "Unsubscription Reason",
            "type": "string"
          }
        }
      },
      "AutomationAttemptStatus": {
        "title": "Status",
        "description": "An enumeration.",
        "enum": [
          "unprocessed",
          "processed",
          "failed",
          "pending",
          "skipped"
        ],
        "type": "string"
      },
      "AutomationForSubscriber": {
        "title": "AutomationForSubscriber",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/AutomationAttemptStatus"
          },
          "automation_id": {
            "title": "Automation Id",
            "type": "string",
            "format": "uuid"
          },
          "execution_date": {
            "title": "Execution Date",
            "type": "string",
            "format": "date-time"
          },
          "actions": {
            "title": "Actions",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "name",
          "status",
          "automation_id",
          "execution_date",
          "actions"
        ]
      },
      "AutomationForSubscriberPage": {
        "title": "Page[AutomationForSubscriber]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutomationForSubscriber"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "results",
          "count"
        ]
      },
      "StripeSubscription": {
        "title": "StripeSubscription",
        "type": "object",
        "properties": {
          "subscription_id": {
            "title": "Subscription Id",
            "type": "string"
          },
          "url": {
            "title": "Url",
            "type": "string"
          },
          "creation_date": {
            "title": "Creation Date",
            "description": "The date and time at which the object was first created.",
            "type": "string",
            "format": "date-time"
          },
          "ending_date": {
            "title": "Ending Date",
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "title": "Amount",
            "type": "integer"
          },
          "currency": {
            "title": "Currency",
            "type": "string"
          },
          "cadence": {
            "title": "Cadence",
            "type": "string"
          },
          "status": {
            "title": "Status",
            "type": "string"
          },
          "application_fee_percent": {
            "title": "Application Fee Percent",
            "description": "The application fee percent for the subscription.",
            "type": "number"
          },
          "source": {
            "title": "Source",
            "description": "Buttondown attempts to detect the source of a subscription, but this is not always possible.",
            "enum": [
              "substack",
              "buttondown"
            ],
            "type": "string"
          },
          "product": {
            "title": "Product",
            "description": "The name of the product which the subscriber is subscribed to. (You can override this by setting the `buttondown_template_facing_id` metadata on the product in Stripe.)",
            "type": "string"
          }
        },
        "required": [
          "subscription_id",
          "url",
          "creation_date",
          "amount",
          "currency",
          "cadence",
          "status"
        ]
      },
      "StripeSubscriptionPage": {
        "title": "Page[UnexpandableStripeSubscription]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StripeSubscription"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "results",
          "count"
        ]
      },
      "NewsletterAuditingMode": {
        "title": "AuditingMode",
        "description": "An enumeration.",
        "enum": [
          "disabled",
          "enabled",
          "aggressive"
        ],
        "type": "string"
      },
      "Newsletter": {
        "title": "Newsletter",
        "description": "You will likely not need to interact with your newsletter settings\nprogrammatically, but if you do, this is the endpoint for you. You can\ncreate, update, and list newsletters via the API; this is ideal for\nintegrating with Buttondown as a headless email or newsletter provider\n(e.g. for a SaaS product.)",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "description": "A brief description of your newsletter",
            "type": "string"
          },
          "creation_date": {
            "title": "Creation Date",
            "description": "The date and time at which the object was first created.",
            "type": "string",
            "format": "date-time"
          },
          "api_key": {
            "title": "Api Key",
            "type": "string",
            "format": "uuid"
          },
          "tint_color": {
            "title": "Tint Color",
            "default": "#0069FF",
            "type": "string"
          },
          "from_name": {
            "title": "From Name",
            "default": "",
            "type": "string"
          },
          "header": {
            "title": "Header",
            "default": "",
            "type": "string"
          },
          "footer": {
            "title": "Footer",
            "default": "",
            "type": "string"
          },
          "domain": {
            "title": "Domain",
            "default": "",
            "type": "string"
          },
          "email_domain": {
            "title": "Email Domain",
            "default": "",
            "type": "string"
          },
          "enabled_features": {
            "title": "Enabled Features",
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "custom_email_template": {
            "title": "Custom Email Template",
            "type": "string"
          },
          "css": {
            "title": "Css",
            "description": "Custom CSS styling for your newsletter emails",
            "default": "",
            "type": "string"
          },
          "web_css": {
            "title": "Web Css",
            "description": "Custom CSS styling for your newsletter's web presence",
            "default": "",
            "type": "string"
          },
          "icon": {
            "title": "Icon",
            "description": "URL to your newsletter's icon image",
            "type": "string"
          },
          "image": {
            "title": "Image",
            "description": "URL to your newsletter's header or branding image",
            "type": "string"
          },
          "auditing_mode": {
            "description": "The auditing mode for your newsletter. See [the Firewall](https://docs.buttondown.com/firewall) for more information.",
            "enum": [
              "disabled",
              "enabled",
              "aggressive"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/NewsletterAuditingMode"
              }
            ]
          },
          "custom_churn_email_subject": {
            "title": "Custom Churn Email Subject",
            "description": "Custom subject line for churn emails",
            "default": "",
            "type": "string"
          },
          "custom_churn_email_body": {
            "title": "Custom Churn Email Body",
            "description": "Custom body content for churn emails",
            "default": "",
            "type": "string"
          },
          "custom_churn_email_template": {
            "title": "Custom Churn Email Template",
            "description": "Custom template for churn emails",
            "type": "string"
          }
        },
        "required": [
          "id",
          "username",
          "name",
          "description",
          "creation_date",
          "api_key"
        ]
      },
      "NewsletterPage": {
        "title": "Page[Newsletter]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Newsletter"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "results",
          "count"
        ]
      },
      "CreateNewsletterErrorCode": {
        "title": "CreateNewsletterErrorCode",
        "description": "Represents the type of error that occurred when creating a newsletter.\n\nHuman-readable error messages are provided in the `detail` field of the response;\nthese values are meant to be parseable by code or client logic.",
        "enum": [
          "username_already_exists",
          "username_malformed"
        ],
        "type": "string"
      },
      "ErrorMessage_CreateNewsletterErrorCode_": {
        "title": "ErrorMessage[CreateNewsletterErrorCode]",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/CreateNewsletterErrorCode"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "code",
          "detail"
        ]
      },
      "NewsletterInput": {
        "title": "NewsletterInput",
        "type": "object",
        "properties": {
          "username": {
            "title": "Username",
            "example": "sheinhardt",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "example": "Sheinhardt Wig Company",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "example": "Stay up to date with the latest trends in wigs and hairpieces",
            "type": "string"
          },
          "tint_color": {
            "title": "Tint Color",
            "default": "#0069FF",
            "type": "string"
          },
          "from_name": {
            "title": "From Name",
            "default": "",
            "type": "string"
          },
          "header": {
            "title": "Header",
            "default": "",
            "type": "string"
          },
          "footer": {
            "title": "Footer",
            "default": "",
            "type": "string"
          },
          "domain": {
            "title": "Domain",
            "default": "",
            "type": "string"
          },
          "email_domain": {
            "title": "Email Domain",
            "default": "",
            "type": "string"
          },
          "enabled_features": {
            "title": "Enabled Features",
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "custom_email_template": {
            "title": "Custom Email Template",
            "type": "string"
          },
          "css": {
            "title": "Css",
            "description": "Custom CSS styling for your newsletter emails.",
            "default": "",
            "example": ".header { color: #000; }",
            "type": "string"
          },
          "web_css": {
            "title": "Web Css",
            "description": "Custom CSS styling for your newsletter's web presence.",
            "default": "",
            "example": ".container { max-width: 800px; }",
            "type": "string"
          },
          "icon": {
            "title": "Icon",
            "description": "URL to your newsletter's icon image.",
            "default": "",
            "example": "https://example.com/icon.png",
            "type": "string"
          },
          "image": {
            "title": "Image",
            "description": "URL to your newsletter's header or branding image.",
            "default": "",
            "example": "https://example.com/header.jpg",
            "type": "string"
          },
          "auditing_mode": {
            "$ref": "#/components/schemas/NewsletterAuditingMode"
          }
        },
        "required": [
          "username",
          "name",
          "description"
        ]
      },
      "NewsletterUpdateInput": {
        "title": "NewsletterUpdateInput",
        "type": "object",
        "properties": {
          "username": {
            "title": "Username",
            "example": "sheinhardt",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "example": "Sheinhardt Wig Company",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "example": "Stay up to date with the latest trends in wigs and hairpieces",
            "type": "string"
          },
          "tint_color": {
            "title": "Tint Color",
            "type": "string"
          },
          "from_name": {
            "title": "From Name",
            "type": "string"
          },
          "header": {
            "title": "Header",
            "type": "string"
          },
          "footer": {
            "title": "Footer",
            "type": "string"
          },
          "domain": {
            "title": "Domain",
            "description": "The domain of the newsletter on which archives are hosted.",
            "pattern": "^(([a-zA-Z]{1})|([a-zA-Z]{1}[a-zA-Z]{1})|([a-zA-Z]{1}[0-9]{1})|([0-9]{1}[a-zA-Z]{1})|([a-zA-Z0-9][-_.a-zA-Z0-9]{0,61}[a-zA-Z0-9]))\\.([a-zA-Z]{2,13}|[a-zA-Z0-9-]{2,30}.[a-zA-Z]{2,3})$|^$",
            "example": "sheinhardt.com",
            "type": "string"
          },
          "email_domain": {
            "title": "Email Domain",
            "description": "The domain of the newsletter from which emails are sent.",
            "example": "mail.sheinhardt.com",
            "type": "string"
          },
          "auditing_mode": {
            "$ref": "#/components/schemas/NewsletterAuditingMode"
          },
          "enabled_features": {
            "title": "Enabled Features",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "custom_email_template": {
            "title": "Custom Email Template",
            "type": "string"
          },
          "css": {
            "title": "Css",
            "description": "Custom CSS styling for your newsletter emails.",
            "example": ".header { color: #000; }",
            "type": "string"
          },
          "web_css": {
            "title": "Web Css",
            "description": "Custom CSS styling for your newsletter's web presence.",
            "example": ".container { max-width: 800px; }",
            "type": "string"
          },
          "icon": {
            "title": "Icon",
            "description": "URL to your newsletter's icon image.",
            "example": "https://example.com/icon.png",
            "type": "string"
          },
          "image": {
            "title": "Image",
            "description": "URL to your newsletter's header or branding image.",
            "example": "https://example.com/header.jpg",
            "type": "string"
          },
          "custom_churn_email_subject": {
            "title": "Custom Churn Email Subject",
            "description": "Custom subject line for churn emails.",
            "example": "You've canceled your premium subscription to {{ newsletter.name }}",
            "type": "string"
          },
          "custom_churn_email_body": {
            "title": "Custom Churn Email Body",
            "description": "Custom body content for churn emails.",
            "example": "Hi {{ subscriber.email }},\n\nWe're sorry to see you go!",
            "type": "string"
          },
          "custom_churn_email_template": {
            "title": "Custom Churn Email Template",
            "description": "Custom template for churn emails.",
            "type": "string"
          }
        }
      },
      "BulkActionType": {
        "title": "Type",
        "description": "Represents the action being performed on a bulk of objects.\n\n(Not to be coy, but these names should be self-explanatory.)",
        "enum": [
          "apply_tags",
          "apply_metadata",
          "ban_subscribers",
          "delete_subscribers",
          "gift_subscribers",
          "ungift_subscribers",
          "reactivate_subscribers",
          "mark_subscribers_as_not_spammy",
          "resubscribe_subscribers",
          "send_emails",
          "send_reminders",
          "unsubscribe_subscribers",
          "delete_emails",
          "update_email_types",
          "update_archival_modes",
          "update_commenting_modes",
          "delete_tags",
          "delete_surveys",
          "delete_survey_responses",
          "replay_events",
          "delete_comments",
          "update_survey_statuses",
          "modify_stripe_subscriptions"
        ],
        "type": "string"
      },
      "BulkActionStatus": {
        "title": "Status",
        "description": "Represents the status of a bulk action.\n\nNo action is required to move from one state or another; Buttondown\ninternally handles the transitions, and exposing the status is for\nobservability purposes only.",
        "enum": [
          "not_started",
          "in_progress",
          "processed",
          "failed"
        ],
        "type": "string"
      },
      "BulkAction": {
        "title": "BulkAction",
        "description": "A bulk action represents, well, a bulk action. It is used to perform\nactions on a large number of objects at once. For example, you can\nuse it to delete a large number of emails, or to unsubscribe a large\nnumber of subscribers. The actions within a bulk action are processed\nserially by Buttondown; this should be considered an ergonomic way to\nbatch API calls across the network rather than a net-new piece of functionality\nin of itself.",
        "type": "object",
        "properties": {
          "type": {
            "description": "The type of bulk action to perform.",
            "example": "delete_emails",
            "allOf": [
              {
                "$ref": "#/components/schemas/BulkActionType"
              }
            ]
          },
          "metadata": {
            "title": "Metadata",
            "example": {
              "ids": [
                "611c8825-6f21-4544-bb47-9f50453e9cb0",
                "418c701a-efe3-4e3d-a404-e635a2f28775"
              ]
            },
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "object"
                }
              ]
            }
          },
          "id": {
            "title": "Id",
            "description": "A unique UUID associated with the object.",
            "type": "string",
            "format": "uuid"
          },
          "creation_date": {
            "title": "Creation Date",
            "description": "The date and time at which the object was created.",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/BulkActionStatus"
          },
          "completion_date": {
            "title": "Completion Date",
            "description": "The date and time at which the bulk action was completed.",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "type",
          "metadata",
          "id",
          "creation_date",
          "status"
        ]
      },
      "BulkActionInput": {
        "title": "BulkActionInput",
        "type": "object",
        "properties": {
          "type": {
            "description": "The type of bulk action to perform.",
            "example": "delete_emails",
            "allOf": [
              {
                "$ref": "#/components/schemas/BulkActionType"
              }
            ]
          },
          "metadata": {
            "title": "Metadata",
            "example": {
              "ids": [
                "611c8825-6f21-4544-bb47-9f50453e9cb0",
                "418c701a-efe3-4e3d-a404-e635a2f28775"
              ]
            },
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "object"
                }
              ]
            }
          }
        },
        "required": [
          "type",
          "metadata"
        ]
      },
      "ExternalFeedAutomationStatus": {
        "title": "Status",
        "description": "Represents the status of the automation, and whether or not it is active. Inactive automations will not be processed. Deleted automations will not be processed.",
        "enum": [
          "active",
          "failing",
          "inactive",
          "deleted"
        ],
        "type": "string"
      },
      "ExternalFeedAutomationBehavior": {
        "title": "Behavior",
        "description": "An enumeration.",
        "enum": [
          "draft",
          "emails"
        ],
        "type": "string"
      },
      "ExternalFeedAutomationCadence": {
        "title": "Cadence",
        "description": "An enumeration.",
        "enum": [
          "every",
          "daily",
          "weekly",
          "monthly"
        ],
        "type": "string"
      },
      "ExternalFeed": {
        "title": "ExternalFeed",
        "description": "An automation is a one-to-one mapping between an external RSS feed and an action\nto be performed when new items are detected in that feed. Right now, Buttondown offers\ntwo actions:\n\n- Send an email\n- Create an email but save it as a draft to be sent out manually\n\nThe automation is configured with a cadence, which is the frequency at which the\nautomation will be run. The cadence can be one of the following:\n\n- Run the automation every time a new item is detected in the feed\n- Run the automation once per week\n- Run the automation once per month",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "creation_date": {
            "title": "Creation Date",
            "description": "The date and time at which the object was first created.",
            "type": "string",
            "format": "date-time"
          },
          "last_checked_date": {
            "title": "Last Checked Date",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/ExternalFeedAutomationStatus"
          },
          "behavior": {
            "$ref": "#/components/schemas/ExternalFeedAutomationBehavior"
          },
          "cadence": {
            "$ref": "#/components/schemas/ExternalFeedAutomationCadence"
          },
          "cadence_metadata": {
            "title": "Cadence Metadata",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/FilterGroup"
          },
          "url": {
            "title": "Url",
            "type": "string"
          },
          "subject": {
            "title": "Subject",
            "type": "string"
          },
          "body": {
            "title": "Body",
            "type": "string"
          },
          "label": {
            "title": "Label",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "description": "Metadata to be passed to emails rendered by this RSS feed.",
            "example": {
              "foo": "bar"
            },
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "skip_old_items": {
            "title": "Skip Old Items",
            "description": "Skip items with publish date older than one day from when they're discovered",
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "creation_date",
          "status",
          "behavior",
          "cadence",
          "cadence_metadata",
          "filters",
          "url",
          "subject",
          "body",
          "label",
          "skip_old_items"
        ]
      },
      "ExternalFeedInput": {
        "title": "ExternalFeedInput",
        "type": "object",
        "properties": {
          "url": {
            "title": "Url",
            "description": "The URL of the RSS feed to poll for new items.",
            "example": "http://lorem-rss.herokuapp.com/feed",
            "type": "string"
          },
          "behavior": {
            "description": "The [behavior](https://docs.buttondown.com/api-external-feed-behavior) of the external feed.",
            "example": "draft",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFeedAutomationBehavior"
              }
            ]
          },
          "cadence": {
            "example": "daily",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFeedAutomationCadence"
              }
            ]
          },
          "cadence_metadata": {
            "title": "Cadence Metadata",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/FilterGroup"
          },
          "subject": {
            "title": "Subject",
            "type": "string"
          },
          "body": {
            "title": "Body",
            "type": "string"
          },
          "label": {
            "title": "Label",
            "default": "",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "description": "Metadata to be passed to emails rendered by this RSS feed.",
            "example": {
              "foo": "bar"
            },
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "skip_old_items": {
            "title": "Skip Old Items",
            "description": "Skip items with publish date older than one day from when they're discovered",
            "default": false,
            "type": "boolean"
          }
        },
        "required": [
          "url",
          "behavior",
          "cadence",
          "cadence_metadata",
          "filters",
          "subject",
          "body"
        ]
      },
      "ExternalFeedPage": {
        "title": "Page[ExternalFeed]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalFeed"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "results",
          "count"
        ]
      },
      "ExternalFeedUpdateInput": {
        "title": "ExternalFeedUpdateInput",
        "type": "object",
        "properties": {
          "behavior": {
            "example": "draft",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFeedAutomationBehavior"
              }
            ]
          },
          "cadence": {
            "example": "daily",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFeedAutomationCadence"
              }
            ]
          },
          "cadence_metadata": {
            "title": "Cadence Metadata",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/FilterGroup"
          },
          "subject": {
            "title": "Subject",
            "type": "string"
          },
          "body": {
            "title": "Body",
            "type": "string"
          },
          "label": {
            "title": "Label",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ExternalFeedAutomationStatus"
          },
          "metadata": {
            "title": "Metadata",
            "description": "Metadata to be passed to emails rendered by this RSS feed.",
            "example": {
              "foo": "bar"
            },
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "skip_old_items": {
            "title": "Skip Old Items",
            "description": "Skip items with publish date older than one day from when they're discovered",
            "type": "boolean"
          }
        }
      },
      "ExternalFeedItemStatus": {
        "title": "Status",
        "description": "The status of a given item (meaning a distinct URL) within an RSS feed.",
        "enum": [
          "unprocessed",
          "irrelevant",
          "errored",
          "skipped",
          "queued",
          "processed"
        ],
        "type": "string"
      },
      "ExternalFeedItem": {
        "title": "ExternalFeedItem",
        "description": "An external feed item is a single item in an external RSS feed. It is created\nautomatically by Buttondown when a new item is detected in an external feed. External feed\nitems are immutable and cannot be modified or deleted.",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "creation_date": {
            "title": "Creation Date",
            "description": "The date and time at which the object was first created.",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/ExternalFeedItemStatus"
          },
          "url": {
            "title": "Url",
            "type": "string"
          },
          "publish_date": {
            "title": "Publish Date",
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "title": "Title",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          },
          "author": {
            "title": "Author",
            "type": "string"
          },
          "email_id": {
            "title": "Email Id",
            "type": "string",
            "format": "uuid"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          }
        },
        "required": [
          "id",
          "creation_date",
          "status",
          "url",
          "publish_date",
          "title",
          "description",
          "content",
          "author"
        ]
      },
      "ExternalFeedItemPage": {
        "title": "Page[ExternalFeedItem]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalFeedItem"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "results",
          "count"
        ]
      },
      "AutomationStatus": {
        "title": "Status",
        "description": "An enumeration.",
        "enum": [
          "active",
          "inactive"
        ],
        "type": "string"
      },
      "ExternalEventType": {
        "title": "Type",
        "description": "Various types of events that are recorded by Buttondown, both in terms of exogenous systems\nlike Stripe and Memberful, and endogenous ones like email opens and clicks. (In general, if anything\nimportant ever happens that could be relevant to your newsletter, we have an event type for it!)\n\nThese event types power lots of things within Buttondown. They're used to trigger automations, webhooks,\nand analytics.\n\n(Note that Buttondown also has a different thing we call \"events\"; those are `EmailEvents` and are used\nfor tracking aggregate details about an email. Alas, we shouldn't have used the term \"event\" for two different\nthings, but it's too late to go back now!)\n\nIn general, our event namespacing tries to hew to the following pattern:\n\n<source>.<object>.<action>\n\nWhen wondering which object we are referring to, default to the _more granular_ object.\n\nFor instance, an email being sent to a subscriber is `subscriber.delivered`, not `email.sent`.",
        "enum": [
          "subscriber.created",
          "subscriber.unsubscribed",
          "subscriber.changed_email",
          "subscriber.confirmed",
          "subscriber.trial_started",
          "subscriber.trial_ended",
          "subscriber.type.changed",
          "subscriber.tags.changed",
          "subscriber.clicked",
          "subscriber.opened",
          "subscriber.paid",
          "subscriber.churned",
          "subscriber.updated",
          "subscriber.deleted",
          "subscriber.viewed_checkout_page",
          "subscriber.replied",
          "subscriber.paused",
          "subscriber.resumed",
          "subscriber.responded_to_survey",
          "subscriber.referred",
          "subscriber.referred.paid",
          "subscriber.commented",
          "subscriber.delivered",
          "subscriber.complained",
          "subscriber.bounced",
          "subscriber.rejected",
          "survey.created",
          "survey.updated",
          "survey.deleted",
          "survey.cleared_responses",
          "email.created",
          "email.sent",
          "email.updated",
          "email.deleted",
          "email.status.changed",
          "mention.created",
          "advertising_slot.purchased",
          "social_mention.created",
          "export.created",
          "export.completed",
          "export.failed",
          "automation.invoked",
          "stripe.checkout.session.completed",
          "stripe.subscription.activated",
          "stripe.subscription.churning",
          "stripe.subscription.deactivated",
          "stripe.customer.updated",
          "memberful.subscription.created",
          "memberful.subscription.deleted",
          "memberful.member.updated",
          "date.day.started",
          "date.week.started",
          "date.month.started",
          "date.year.started",
          "firewall.blocked",
          "patreon.membership.created",
          "patreon.membership.deleted",
          "patreon.member.updated",
          "note.created",
          "note.deleted",
          "external_feed_item.created",
          "shopify.customer.created",
          "shopify.customer.updated"
        ],
        "type": "string"
      },
      "Delay": {
        "title": "Delay",
        "type": "object",
        "properties": {
          "value": {
            "title": "Value",
            "type": "string"
          },
          "unit": {
            "title": "Unit",
            "enum": [
              "minutes",
              "hours",
              "days",
              "weeks"
            ],
            "type": "string"
          },
          "time_of_day": {
            "title": "Time Of Day",
            "enum": [
              "morning",
              "evening",
              ""
            ],
            "type": "string"
          }
        },
        "required": [
          "value",
          "unit"
        ]
      },
      "Timing": {
        "title": "Timing",
        "type": "object",
        "properties": {
          "time": {
            "title": "Time",
            "enum": [
              "immediate",
              "delay"
            ],
            "type": "string"
          },
          "delay": {
            "$ref": "#/components/schemas/Delay"
          }
        },
        "required": [
          "time"
        ]
      },
      "AutomationActionType": {
        "title": "ActionType",
        "description": "The action that is triggered when the automation is successfully run.",
        "enum": [
          "add_tags",
          "remove_tags",
          "send_email",
          "add_metadata",
          "change_email_address",
          "gift_premium_subscription",
          "ungift_premium_subscription",
          "send_discord_invitation",
          "send_github_invitation",
          "create_subscriber",
          "unsubscribe_subscriber",
          "shopify_unsubscribe",
          "shopify_resubscribe",
          "shopify_set_tags",
          "shopify_create_customer",
          "send_notification",
          "forward_reply",
          "create_linkedin_post",
          "create_twitter_post",
          "create_tumblr_post",
          "create_bluesky_post",
          "create_arena_post",
          "create_export",
          "send_post_request",
          "send_confirmation_reminder"
        ],
        "type": "string"
      },
      "Action": {
        "title": "Action",
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AutomationActionType"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object"
          }
        },
        "required": [
          "type",
          "metadata"
        ]
      },
      "Automation": {
        "title": "Automation",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "creation_date": {
            "title": "Creation Date",
            "description": "The date and time at which the object was first created.",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/AutomationStatus"
          },
          "trigger": {
            "$ref": "#/components/schemas/ExternalEventType"
          },
          "timing": {
            "$ref": "#/components/schemas/Timing"
          },
          "actions": {
            "title": "Actions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Action"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/FilterGroup"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "creation_date",
          "name",
          "status",
          "trigger",
          "timing",
          "actions",
          "filters",
          "metadata"
        ]
      },
      "AutomationPage": {
        "title": "Page[Automation]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Automation"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "results",
          "count"
        ]
      },
      "AutomationCreationErrorCode": {
        "title": "AutomationCreationErrorCode",
        "description": "Represents the type of error that occurred when creating an automation.\n\nHuman-readable error messages are provided in the `detail` field of the response;\nthese values are meant to be parseable by code or client logic.",
        "enum": [
          "delay_invalid",
          "filter_invalid__tag",
          "filter_invalid",
          "action_invalid",
          "invalid_newsletter_id",
          "action_invalid__missing_body_or_subject"
        ],
        "type": "string"
      },
      "ErrorMessage_AutomationCreationErrorCode_": {
        "title": "ErrorMessage[AutomationCreationErrorCode]",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/AutomationCreationErrorCode"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "code",
          "detail"
        ]
      },
      "AutomationInput": {
        "title": "AutomationInput",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "trigger": {
            "$ref": "#/components/schemas/ExternalEventType"
          },
          "timing": {
            "$ref": "#/components/schemas/Timing"
          },
          "actions": {
            "title": "Actions",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/FilterGroup"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "trigger",
          "timing",
          "actions",
          "filters"
        ]
      },
      "SubscriberForAutomation": {
        "title": "SubscriberForAutomation",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "$ref": "#/components/schemas/AutomationAttemptStatus"
          },
          "subscriber_id": {
            "title": "Subscriber Id",
            "type": "string"
          },
          "subscriber": {
            "$ref": "#/components/schemas/Subscriber"
          }
        },
        "required": [
          "id",
          "status"
        ]
      },
      "SubscriberForAutomationPage": {
        "title": "Page[SubscriberForAutomation]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriberForAutomation"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "results",
          "count"
        ]
      },
      "AutomationUpdateInput": {
        "title": "AutomationUpdateInput",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/AutomationStatus"
          },
          "trigger": {
            "$ref": "#/components/schemas/ExternalEventType"
          },
          "timing": {
            "$ref": "#/components/schemas/Timing"
          },
          "actions": {
            "title": "Actions",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/FilterGroup"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "Failure": {
        "title": "Failure",
        "description": "An enumeration.",
        "enum": [
          "email_already_exists"
        ],
        "type": "string"
      },
      "ErrorMessage_Failure_": {
        "title": "ErrorMessage[Failure]",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/Failure"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "code",
          "detail"
        ]
      },
      "UserInput": {
        "title": "UserInput",
        "type": "object",
        "properties": {
          "permissions": {
            "$ref": "#/components/schemas/Permissions"
          },
          "email_address": {
            "title": "Email Address",
            "type": "string"
          }
        },
        "required": [
          "permissions",
          "email_address"
        ]
      },
      "UserPage": {
        "title": "Page[User]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "results",
          "count"
        ]
      },
      "UserUpdateInput": {
        "title": "UserUpdateInput",
        "type": "object",
        "properties": {
          "permissions": {
            "title": "Permissions",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "permissions"
        ]
      },
      "Product": {
        "title": "Product",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "product_id": {
            "title": "Product Id",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string"
          },
          "active": {
            "title": "Active",
            "type": "boolean"
          },
          "default_price": {
            "title": "Default Price",
            "type": "string"
          }
        },
        "required": [
          "id",
          "product_id",
          "name",
          "creation_date",
          "active"
        ]
      },
      "Price": {
        "title": "Price",
        "type": "object",
        "properties": {
          "style": {
            "title": "Style",
            "enum": [
              "pay-what-you-want",
              "fixed",
              "usage-based"
            ],
            "type": "string"
          },
          "amount": {
            "title": "Amount",
            "type": "integer"
          },
          "suggested_amount": {
            "title": "Suggested Amount",
            "type": "integer"
          },
          "currency": {
            "title": "Currency",
            "type": "string"
          },
          "cadence": {
            "title": "Cadence",
            "enum": [
              "year",
              "month",
              "one-time",
              "email",
              "week"
            ],
            "type": "string"
          },
          "product_id": {
            "title": "Product Id",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "string"
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          }
        },
        "required": [
          "style",
          "currency",
          "cadence",
          "id"
        ]
      },
      "PricePage": {
        "title": "Page[Price]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Price"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "results",
          "count"
        ]
      },
      "ListPricesErrorCode": {
        "title": "ListPricesErrorCode",
        "description": "Represents the type of error that occurred when listing a price.\n\nHuman-readable error messages are provided in the `detail` field of the response;\nthese values are meant to be parseable by code or client logic.",
        "enum": [
          "paid_subscriptions_uninitialized"
        ],
        "type": "string"
      },
      "ErrorMessage_ListPricesErrorCode_": {
        "title": "ErrorMessage[ListPricesErrorCode]",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/ListPricesErrorCode"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "code",
          "detail"
        ]
      },
      "CreatePriceErrorCode": {
        "title": "CreatePriceErrorCode",
        "description": "Represents the type of error that occurred when listing a price.\n\nHuman-readable error messages are provided in the `detail` field of the response;\nthese values are meant to be parseable by code or client logic.",
        "enum": [
          "paid_subscriptions_uninitialized",
          "invalid_amount"
        ],
        "type": "string"
      },
      "ErrorMessage_CreatePriceErrorCode_": {
        "title": "ErrorMessage[CreatePriceErrorCode]",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/CreatePriceErrorCode"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "code",
          "detail"
        ]
      },
      "PriceInput": {
        "title": "PriceInput",
        "type": "object",
        "properties": {
          "style": {
            "title": "Style",
            "enum": [
              "pay-what-you-want",
              "fixed",
              "usage-based"
            ],
            "type": "string"
          },
          "amount": {
            "title": "Amount",
            "type": "integer"
          },
          "suggested_amount": {
            "title": "Suggested Amount",
            "type": "integer"
          },
          "currency": {
            "title": "Currency",
            "type": "string"
          },
          "cadence": {
            "title": "Cadence",
            "enum": [
              "year",
              "month",
              "one-time",
              "email",
              "week"
            ],
            "type": "string"
          },
          "product_id": {
            "title": "Product Id",
            "type": "string"
          }
        },
        "required": [
          "style",
          "currency",
          "cadence"
        ]
      },
      "StripeCouponPage": {
        "title": "Page[StripeCoupon]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StripeCoupon"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "results",
          "count"
        ]
      },
      "SurveyResponseCadence": {
        "title": "ResponseCadence",
        "description": "An enumeration.",
        "enum": [
          "once",
          "once_per_email"
        ],
        "type": "string"
      },
      "SurveyStatus": {
        "title": "Status",
        "description": "An enumeration.",
        "enum": [
          "active",
          "inactive"
        ],
        "type": "string"
      },
      "SurveyInputType": {
        "title": "InputType",
        "description": "An enumeration.",
        "enum": [
          "radio",
          "checkbox",
          "text"
        ],
        "type": "string"
      },
      "Survey": {
        "title": "Survey",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "description": "A unique UUID associated with the object.",
            "type": "string",
            "format": "uuid"
          },
          "creation_date": {
            "title": "Creation Date",
            "description": "The date and time at which the object was created.",
            "type": "string",
            "format": "date-time"
          },
          "identifier": {
            "title": "Identifier",
            "type": "string"
          },
          "question": {
            "title": "Question",
            "type": "string"
          },
          "response_count": {
            "title": "Response Count",
            "type": "integer"
          },
          "answers": {
            "title": "Answers",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "notes": {
            "title": "Notes",
            "type": "string"
          },
          "response_cadence": {
            "$ref": "#/components/schemas/SurveyResponseCadence"
          },
          "status": {
            "$ref": "#/components/schemas/SurveyStatus"
          },
          "is_freeform_response_enabled": {
            "title": "Is Freeform Response Enabled",
            "type": "boolean"
          },
          "input_type": {
            "$ref": "#/components/schemas/SurveyInputType"
          }
        },
        "required": [
          "id",
          "creation_date",
          "identifier",
          "question",
          "response_count",
          "answers",
          "notes",
          "response_cadence",
          "status",
          "is_freeform_response_enabled",
          "input_type"
        ]
      },
      "CreateSurveyErrorCode": {
        "title": "CreateSurveyErrorCode",
        "description": "Represents the type of error that occurred when creating a survey.\n\nHuman-readable error messages are provided in the `detail` field of the response;\nthese values are meant to be parseable by code or client logic.",
        "enum": [
          "identifier_already_exists"
        ],
        "type": "string"
      },
      "ErrorMessage_CreateSurveyErrorCode_": {
        "title": "ErrorMessage[CreateSurveyErrorCode]",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/CreateSurveyErrorCode"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "code",
          "detail"
        ]
      },
      "SurveyInput": {
        "title": "SurveyInput",
        "type": "object",
        "properties": {
          "identifier": {
            "title": "Identifier",
            "example": "color",
            "type": "string"
          },
          "question": {
            "title": "Question",
            "example": "What's your favorite color?",
            "type": "string"
          },
          "answers": {
            "title": "Answers",
            "example": [
              "Red",
              "Green",
              "Blue"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "notes": {
            "title": "Notes",
            "default": "",
            "example": "",
            "type": "string"
          },
          "is_freeform_response_enabled": {
            "title": "Is Freeform Response Enabled",
            "default": false,
            "example": false,
            "type": "boolean"
          },
          "input_type": {
            "default": "radio",
            "example": "radio",
            "allOf": [
              {
                "$ref": "#/components/schemas/SurveyInputType"
              }
            ]
          },
          "response_cadence": {
            "default": "once",
            "example": "once",
            "allOf": [
              {
                "$ref": "#/components/schemas/SurveyResponseCadence"
              }
            ]
          }
        },
        "required": [
          "identifier",
          "question",
          "answers"
        ]
      },
      "SurveyPage": {
        "title": "Page[Survey]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Survey"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "results",
          "count"
        ]
      },
      "UpdateSurveyErrorCode": {
        "title": "UpdateSurveyErrorCode",
        "description": "An enumeration.",
        "enum": [
          "answers_empty"
        ],
        "type": "string"
      },
      "ErrorMessage_UpdateSurveyErrorCode_": {
        "title": "ErrorMessage[UpdateSurveyErrorCode]",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/UpdateSurveyErrorCode"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "code",
          "detail"
        ]
      },
      "SurveyUpdateInput": {
        "title": "SurveyUpdateInput",
        "type": "object",
        "properties": {
          "notes": {
            "title": "Notes",
            "type": "string"
          },
          "answers": {
            "title": "Answers",
            "example": [
              "Red",
              "Green",
              "Blue"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "response_cadence": {
            "example": "once",
            "allOf": [
              {
                "$ref": "#/components/schemas/SurveyResponseCadence"
              }
            ]
          },
          "status": {
            "$ref": "#/components/schemas/SurveyStatus"
          },
          "is_freeform_response_enabled": {
            "title": "Is Freeform Response Enabled",
            "default": false,
            "type": "boolean"
          },
          "input_type": {
            "$ref": "#/components/schemas/SurveyInputType"
          }
        }
      },
      "APIRequestSource": {
        "title": "Source",
        "description": "An enumeration.",
        "enum": [
          "api",
          "app",
          "carrd",
          "zapier",
          "cli",
          "make"
        ],
        "type": "string"
      },
      "APIRequestDetail": {
        "title": "APIRequestDetail",
        "description": "Represents a request to the API (api.buttondown.com).",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "description": "A unique UUID associated with the object.",
            "type": "string",
            "format": "uuid"
          },
          "creation_date": {
            "title": "Creation Date",
            "description": "The date and time at which the object was created.",
            "type": "string",
            "format": "date-time"
          },
          "status_code": {
            "title": "Status Code",
            "type": "integer"
          },
          "path": {
            "title": "Path",
            "type": "string"
          },
          "method": {
            "title": "Method",
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/APIRequestSource"
          },
          "version": {
            "title": "Version",
            "enum": [
              "2024-07-01",
              "2024-08-01",
              "2024-08-15",
              "2024-09-30",
              "2024-12-30",
              "2025-01-02",
              "2025-05-19",
              "2025-06-01",
              "2026-01-01"
            ],
            "type": "string"
          },
          "ip_address": {
            "title": "Ip Address",
            "type": "string"
          },
          "request_data": {
            "title": "Request Data",
            "type": "string"
          },
          "response_data": {
            "title": "Response Data",
            "type": "string"
          },
          "headers": {
            "title": "Headers",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "creation_date",
          "status_code",
          "path",
          "method",
          "source",
          "version",
          "ip_address",
          "request_data",
          "response_data",
          "headers"
        ]
      },
      "APIRequest": {
        "title": "APIRequest",
        "description": "Represents a request to the API (api.buttondown.com).",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "description": "A unique UUID associated with the object.",
            "type": "string",
            "format": "uuid"
          },
          "creation_date": {
            "title": "Creation Date",
            "description": "The date and time at which the object was created.",
            "type": "string",
            "format": "date-time"
          },
          "status_code": {
            "title": "Status Code",
            "type": "integer"
          },
          "path": {
            "title": "Path",
            "type": "string"
          },
          "method": {
            "title": "Method",
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/APIRequestSource"
          },
          "version": {
            "title": "Version",
            "enum": [
              "2024-07-01",
              "2024-08-01",
              "2024-08-15",
              "2024-09-30",
              "2024-12-30",
              "2025-01-02",
              "2025-05-19",
              "2025-06-01",
              "2026-01-01"
            ],
            "type": "string"
          },
          "ip_address": {
            "title": "Ip Address",
            "type": "string"
          }
        },
        "required": [
          "id",
          "creation_date",
          "status_code",
          "path",
          "method",
          "source",
          "version",
          "ip_address"
        ]
      },
      "APIRequestList": {
        "title": "APIRequestList",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/APIRequest"
            }
          }
        },
        "required": [
          "results"
        ]
      },
      "AdvertisingSKUStatus": {
        "title": "Status",
        "description": "An enumeration.",
        "enum": [
          "active",
          "inactive"
        ],
        "type": "string"
      },
      "AdvertisingSlotStatus": {
        "title": "Status",
        "description": "An enumeration.",
        "enum": [
          "open",
          "sold",
          "finalized",
          "executed",
          "expired"
        ],
        "type": "string"
      },
      "AdvertisingSlot": {
        "title": "AdvertisingSlot",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "date": {
            "title": "Date",
            "type": "string",
            "format": "date"
          },
          "status": {
            "$ref": "#/components/schemas/AdvertisingSlotStatus"
          },
          "invoice_url": {
            "title": "Invoice Url",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "id",
          "date",
          "status",
          "content"
        ]
      },
      "AdvertisingUnit": {
        "title": "AdvertisingUnit",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "creation_date": {
            "title": "Creation Date",
            "description": "The date and time at which the object was first created.",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/AdvertisingSKUStatus"
          },
          "slots": {
            "title": "Slots",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdvertisingSlot"
            }
          },
          "title": {
            "title": "Title",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "behavior": {
            "title": "Behavior",
            "type": "string"
          },
          "url": {
            "title": "Url",
            "type": "string"
          },
          "price": {
            "title": "Price",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "creation_date",
          "status",
          "slots",
          "title",
          "description",
          "behavior",
          "url"
        ]
      },
      "AdvertisingUnitPage": {
        "title": "Page[AdvertisingUnit]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdvertisingUnit"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "results",
          "count"
        ]
      },
      "AdvertisingUnitInput": {
        "title": "AdvertisingUnitInput",
        "type": "object",
        "properties": {
          "title": {
            "title": "Title",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "behavior": {
            "title": "Behavior",
            "default": "",
            "type": "string"
          },
          "url": {
            "title": "Url",
            "default": "",
            "type": "string"
          },
          "price": {
            "title": "Price",
            "type": "integer"
          }
        }
      },
      "AdvertisingUnitUpdateInput": {
        "title": "AdvertisingUnitUpdateInput",
        "type": "object",
        "properties": {
          "title": {
            "title": "Title",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "dates": {
            "title": "Dates",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "behavior": {
            "title": "Behavior",
            "type": "string"
          },
          "url": {
            "title": "Url",
            "type": "string"
          },
          "price": {
            "title": "Price",
            "type": "integer"
          }
        },
        "required": [
          "dates"
        ]
      },
      "AdvertisingSlotUpdateInput": {
        "title": "AdvertisingSlotUpdateInput",
        "type": "object",
        "properties": {
          "content": {
            "title": "Content",
            "type": "string"
          }
        }
      },
      "WebhookStatus": {
        "title": "WebhookStatus",
        "description": "The status of a webhook.",
        "enum": [
          "enabled",
          "disabled"
        ],
        "type": "string"
      },
      "Webhook": {
        "title": "Webhook",
        "description": "Webhooks are used to notify external services of events that occur in the\nsystem. For example, when a newsletter is sent, a webhook can be used to\nnotify an external service that the newsletter has been sent.",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "description": "A unique UUID associated with the object.",
            "type": "string",
            "format": "uuid"
          },
          "creation_date": {
            "title": "Creation Date",
            "description": "The date and time at which the object was created.",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "description": "Whether the webhook is enabled or not.",
            "default": "enabled",
            "example": "enabled",
            "allOf": [
              {
                "$ref": "#/components/schemas/WebhookStatus"
              }
            ]
          },
          "event_types": {
            "description": "The types of event for which the webhook will be triggered.",
            "example": [
              "email.created",
              "email.sent"
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalEventType"
            }
          },
          "url": {
            "title": "Url",
            "description": "The URL to which the webhook will send POST requests.",
            "example": "https://my.api/webhook",
            "minLength": 1,
            "maxLength": 65536,
            "format": "uri",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "description": "An optional description of the webhook, for reference.",
            "default": "",
            "example": "Trigger when an email is created to notify in Slack.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "creation_date",
          "event_types",
          "url"
        ]
      },
      "WebhookInput": {
        "title": "WebhookInput",
        "type": "object",
        "properties": {
          "status": {
            "description": "Whether the webhook is enabled or not.",
            "default": "enabled",
            "example": "enabled",
            "allOf": [
              {
                "$ref": "#/components/schemas/WebhookStatus"
              }
            ]
          },
          "event_types": {
            "description": "The types of event for which the webhook will be triggered.",
            "example": [
              "email.created",
              "email.sent"
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalEventType"
            }
          },
          "url": {
            "title": "Url",
            "description": "The URL to which the webhook will send POST requests.",
            "example": "https://my.api/webhook",
            "minLength": 1,
            "maxLength": 65536,
            "format": "uri",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "description": "An optional description of the webhook, for reference.",
            "default": "",
            "example": "Trigger when an email is created to notify in Slack.",
            "type": "string"
          }
        },
        "required": [
          "event_types",
          "url"
        ]
      },
      "WebhookPage": {
        "title": "Page[Webhook]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Webhook"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "results",
          "count"
        ]
      },
      "WebhookAttemptStatus": {
        "title": "Status",
        "description": "An enumeration.",
        "enum": [
          "unattempted",
          "successful",
          "failed"
        ],
        "type": "string"
      },
      "WebhookAttemptOutput": {
        "title": "WebhookAttemptOutput",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "description": "A unique UUID associated with the object.",
            "type": "string",
            "format": "uuid"
          },
          "creation_date": {
            "title": "Creation Date",
            "description": "The date and time at which the object was created.",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "description": "The status of the webhook attempt.",
            "example": "successful",
            "allOf": [
              {
                "$ref": "#/components/schemas/WebhookAttemptStatus"
              }
            ]
          }
        },
        "required": [
          "id",
          "creation_date",
          "status"
        ]
      },
      "WebhookAttemptOutputPage": {
        "title": "Page[WebhookAttemptOutput]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookAttemptOutput"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "results",
          "count"
        ]
      },
      "CommentType": {
        "title": "Type",
        "description": "An enumeration.",
        "enum": [
          "reviewer",
          "subscriber"
        ],
        "type": "string"
      },
      "Comment": {
        "title": "Comment",
        "description": "Comments are a way for subscribers to interact with newsletters. They're a way to\nprovide feedback, ask questions, and generally engage with the content of an email.\nComments exist in a tree structure; comments that reply to other comments are\nconsidered \"children\" of the parent comment.",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "description": "A unique UUID associated with the object.",
            "type": "string",
            "format": "uuid"
          },
          "creation_date": {
            "title": "Creation Date",
            "description": "The date and time at which the object was created.",
            "type": "string",
            "format": "date-time"
          },
          "email_id": {
            "title": "Email Id",
            "type": "string",
            "format": "uuid"
          },
          "subscriber_id": {
            "title": "Subscriber Id",
            "type": "string",
            "format": "uuid"
          },
          "parent_id": {
            "title": "Parent Id",
            "description": "The ID of the parent comment, if this comment is a reply to another comment.",
            "type": "string",
            "format": "uuid"
          },
          "text": {
            "title": "Text",
            "type": "string"
          },
          "comment_type": {
            "$ref": "#/components/schemas/CommentType"
          },
          "annotation_data": {
            "title": "Annotation Data",
            "type": "object"
          },
          "subscriber": {
            "$ref": "#/components/schemas/Subscriber"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          }
        },
        "required": [
          "id",
          "creation_date",
          "email_id",
          "text",
          "comment_type"
        ]
      },
      "CommentPage": {
        "title": "Page[Comment]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "results",
          "count"
        ]
      },
      "Response": {
        "title": "Response",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "description": "A unique UUID associated with the object.",
            "type": "string",
            "format": "uuid"
          },
          "creation_date": {
            "title": "Creation Date",
            "description": "The date and time at which the object was created.",
            "type": "string",
            "format": "date-time"
          },
          "answer": {
            "title": "Answer",
            "description": "The answer given to the survey.",
            "type": "string"
          },
          "text": {
            "title": "Text",
            "description": "Optional text included by the subscriber with the response. Subscribers are only prompted to supply a text response if the `is_freeform_response_enabled` field is set to `true` on the survey.",
            "type": "string"
          },
          "survey_id": {
            "title": "Survey Id",
            "type": "string",
            "format": "uuid"
          },
          "subscriber_id": {
            "title": "Subscriber Id",
            "type": "string",
            "format": "uuid"
          },
          "email_id": {
            "title": "Email Id",
            "type": "string",
            "format": "uuid"
          },
          "automation_id": {
            "title": "Automation Id",
            "type": "string",
            "format": "uuid"
          },
          "subscriber": {
            "$ref": "#/components/schemas/Subscriber"
          },
          "survey": {
            "$ref": "#/components/schemas/Survey"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "automation": {
            "$ref": "#/components/schemas/Automation"
          }
        },
        "required": [
          "id",
          "creation_date",
          "answer",
          "text",
          "survey_id",
          "subscriber_id"
        ]
      },
      "ResponsePage": {
        "title": "Page[Response]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Response"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "results",
          "count"
        ]
      },
      "ResponseInput": {
        "title": "ResponseInput",
        "type": "object",
        "properties": {
          "subscriber_id": {
            "title": "Subscriber Id",
            "type": "string",
            "format": "uuid"
          },
          "survey_id": {
            "title": "Survey Id",
            "type": "string",
            "format": "uuid"
          },
          "email_id": {
            "title": "Email Id",
            "type": "string"
          },
          "answer": {
            "title": "Answer",
            "type": "integer"
          }
        },
        "required": [
          "subscriber_id",
          "survey_id",
          "email_id",
          "answer"
        ]
      },
      "EmailEventType": {
        "title": "EmailEventType",
        "description": "An enumeration.",
        "enum": [
          "activation_clicked",
          "activation_delivered",
          "activation_opened",
          "activation_bounced",
          "activation_rejected",
          "activation_complained",
          "activation_reminder_clicked",
          "activation_reminder_delivered",
          "activation_reminder_opened",
          "activation_reminder_bounced",
          "activation_reminder_complained",
          "activation_reminder_rejected",
          "attempted",
          "bounced",
          "complained",
          "clicked",
          "dropped",
          "delivered",
          "opened",
          "sent",
          "rejected",
          "replied",
          "unsubscribed"
        ],
        "type": "string"
      },
      "EmailEvent": {
        "title": "EmailEvent",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "subscriber_id": {
            "title": "Subscriber Id",
            "type": "string",
            "format": "uuid"
          },
          "email_id": {
            "title": "Email Id",
            "type": "string",
            "format": "uuid"
          },
          "automation_id": {
            "title": "Automation Id",
            "type": "string",
            "format": "uuid"
          },
          "creation_date": {
            "title": "Creation Date",
            "description": "The date and time at which the object was first created.",
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "event_type": {
            "$ref": "#/components/schemas/EmailEventType"
          },
          "subscriber": {
            "$ref": "#/components/schemas/Subscriber"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "automation": {
            "$ref": "#/components/schemas/Automation"
          }
        },
        "required": [
          "id",
          "creation_date",
          "metadata",
          "event_type"
        ]
      },
      "EmailEventPage": {
        "title": "Page[EmailEvent]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailEvent"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "results",
          "count"
        ]
      },
      "Note": {
        "title": "Note",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "description": "A unique UUID associated with the object.",
            "type": "string",
            "format": "uuid"
          },
          "creation_date": {
            "title": "Creation Date",
            "description": "The date and time at which the object was created.",
            "type": "string",
            "format": "date-time"
          },
          "body": {
            "title": "Body",
            "description": "The text content of the note.",
            "example": "This subscriber upgraded to a paid plan.",
            "type": "string"
          },
          "model_type": {
            "title": "Model Type",
            "description": "The type of object this note is attached to (e.g., 'email', 'subscriber').",
            "example": "email",
            "enum": [
              "email",
              "subscriber",
              "external_feed",
              "automation",
              "survey",
              "stripe_customer",
              "tag"
            ],
            "type": "string"
          },
          "model_id": {
            "title": "Model Id",
            "description": "The ID of the object this note is attached to.",
            "example": "13121cd6-0dfc-424c-bb12-988b0a32fcb3",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object"
          },
          "source": {
            "title": "Source",
            "description": "The source of the note. If the note was created by a Buttondown admin, this will be 'admin'; otherwise, it will be 'user'.",
            "example": "admin",
            "enum": [
              "admin",
              "user"
            ],
            "type": "string"
          },
          "user_id": {
            "title": "User Id",
            "type": "string",
            "format": "uuid"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "creation_date",
          "body",
          "model_type",
          "model_id",
          "metadata",
          "source",
          "user_id"
        ]
      },
      "NoteInput": {
        "title": "NoteInput",
        "type": "object",
        "properties": {
          "body": {
            "title": "Body",
            "description": "The text content of the note.",
            "example": "This subscriber upgraded to a paid plan.",
            "type": "string"
          },
          "model_type": {
            "title": "Model Type",
            "description": "The type of object this note is attached to (e.g., 'email', 'subscriber').",
            "example": "email",
            "enum": [
              "email",
              "subscriber",
              "external_feed",
              "automation",
              "survey",
              "stripe_customer",
              "tag"
            ],
            "type": "string"
          },
          "model_id": {
            "title": "Model Id",
            "description": "The ID of the object this note is attached to.",
            "example": "13121cd6-0dfc-424c-bb12-988b0a32fcb3",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "description": "A structured key-value blob that you can use to store arbitrary data on the object. (You can [read more about metadata.](https://docs.buttondown.com/metadata))",
            "default": {},
            "type": "object"
          }
        },
        "required": [
          "body",
          "model_type",
          "model_id"
        ]
      },
      "NotePage": {
        "title": "Page[Note]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Note"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "results",
          "count"
        ]
      },
      "EmailExcludableField": {
        "type": "string",
        "enum": [
          "body"
        ]
      }
    },
    "securitySchemes": {
      "PermissionAuthenticationRequirement": {
        "type": "http",
        "scheme": "none"
      },
      "GlobalAuth": {
        "type": "http",
        "scheme": "token"
      },
      "OAuthAuth": {
        "type": "http",
        "scheme": "bearer"
      },
      "FallbackForNoAuth": {
        "type": "http",
        "scheme": "none"
      },
      "BulkActionAuth": {
        "type": "http",
        "scheme": "none"
      }
    }
  },
  "servers": [
    {
      "url": "https://api.buttondown.com/v1"
    }
  ]
}